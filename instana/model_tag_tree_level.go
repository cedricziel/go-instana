/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// TagTreeLevel struct for TagTreeLevel
type TagTreeLevel struct {
	Label       string        `json:"label"`
	Description *string       `json:"description,omitempty"`
	Icon        *string       `json:"icon,omitempty"`
	Searchable  bool          `json:"searchable"`
	Children    []TagTreeNode `json:"children"`
	Type        *string       `json:"type,omitempty"`
}

// NewTagTreeLevel instantiates a new TagTreeLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagTreeLevel(label string, searchable bool, children []TagTreeNode) *TagTreeLevel {
	this := TagTreeLevel{}
	this.Label = label
	this.Searchable = searchable
	this.Children = children
	return &this
}

// NewTagTreeLevelWithDefaults instantiates a new TagTreeLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagTreeLevelWithDefaults() *TagTreeLevel {
	this := TagTreeLevel{}
	return &this
}

// GetLabel returns the Label field value
func (o *TagTreeLevel) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *TagTreeLevel) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *TagTreeLevel) SetLabel(v string) {
	o.Label = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TagTreeLevel) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagTreeLevel) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TagTreeLevel) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TagTreeLevel) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *TagTreeLevel) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagTreeLevel) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *TagTreeLevel) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *TagTreeLevel) SetIcon(v string) {
	o.Icon = &v
}

// GetSearchable returns the Searchable field value
func (o *TagTreeLevel) GetSearchable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value
// and a boolean to check if the value has been set.
func (o *TagTreeLevel) GetSearchableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Searchable, true
}

// SetSearchable sets field value
func (o *TagTreeLevel) SetSearchable(v bool) {
	o.Searchable = v
}

// GetChildren returns the Children field value
func (o *TagTreeLevel) GetChildren() []TagTreeNode {
	if o == nil {
		var ret []TagTreeNode
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *TagTreeLevel) GetChildrenOk() (*[]TagTreeNode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Children, true
}

// SetChildren sets field value
func (o *TagTreeLevel) SetChildren(v []TagTreeNode) {
	o.Children = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TagTreeLevel) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagTreeLevel) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TagTreeLevel) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TagTreeLevel) SetType(v string) {
	o.Type = &v
}

func (o TagTreeLevel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if true {
		toSerialize["searchable"] = o.Searchable
	}
	if true {
		toSerialize["children"] = o.Children
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTagTreeLevel struct {
	value *TagTreeLevel
	isSet bool
}

func (v NullableTagTreeLevel) Get() *TagTreeLevel {
	return v.value
}

func (v *NullableTagTreeLevel) Set(val *TagTreeLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableTagTreeLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableTagTreeLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagTreeLevel(val *TagTreeLevel) *NullableTagTreeLevel {
	return &NullableTagTreeLevel{value: val, isSet: true}
}

func (v NullableTagTreeLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagTreeLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
