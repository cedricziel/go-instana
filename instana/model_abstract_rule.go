/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// AbstractRule struct for AbstractRule
type AbstractRule struct {
	// Values: `\"THRESHOLD\"`  `\"SYSTEM\"`  `\"ENTITY_VERIFICATION\"`
	RuleType string `json:"ruleType"`
	Severity *int32 `json:"severity,omitempty"`
}

// NewAbstractRule instantiates a new AbstractRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractRule(ruleType string) *AbstractRule {
	this := AbstractRule{}
	this.RuleType = ruleType
	return &this
}

// NewAbstractRuleWithDefaults instantiates a new AbstractRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractRuleWithDefaults() *AbstractRule {
	this := AbstractRule{}
	return &this
}

// GetRuleType returns the RuleType field value
func (o *AbstractRule) GetRuleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value
// and a boolean to check if the value has been set.
func (o *AbstractRule) GetRuleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleType, true
}

// SetRuleType sets field value
func (o *AbstractRule) SetRuleType(v string) {
	o.RuleType = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AbstractRule) GetSeverity() int32 {
	if o == nil || o.Severity == nil {
		var ret int32
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractRule) GetSeverityOk() (*int32, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AbstractRule) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given int32 and assigns it to the Severity field.
func (o *AbstractRule) SetSeverity(v int32) {
	o.Severity = &v
}

func (o AbstractRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ruleType"] = o.RuleType
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	return json.Marshal(toSerialize)
}

type NullableAbstractRule struct {
	value *AbstractRule
	isSet bool
}

func (v NullableAbstractRule) Get() *AbstractRule {
	return v.value
}

func (v *NullableAbstractRule) Set(val *AbstractRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractRule(val *AbstractRule) *NullableAbstractRule {
	return &NullableAbstractRule{value: val, isSet: true}
}

func (v NullableAbstractRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
