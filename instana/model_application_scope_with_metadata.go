/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// ApplicationScopeWithMetadata struct for ApplicationScopeWithMetadata
type ApplicationScopeWithMetadata struct {
	Id   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

// NewApplicationScopeWithMetadata instantiates a new ApplicationScopeWithMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationScopeWithMetadata(id string) *ApplicationScopeWithMetadata {
	this := ApplicationScopeWithMetadata{}
	this.Id = id
	return &this
}

// NewApplicationScopeWithMetadataWithDefaults instantiates a new ApplicationScopeWithMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationScopeWithMetadataWithDefaults() *ApplicationScopeWithMetadata {
	this := ApplicationScopeWithMetadata{}
	return &this
}

// GetId returns the Id field value
func (o *ApplicationScopeWithMetadata) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApplicationScopeWithMetadata) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApplicationScopeWithMetadata) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationScopeWithMetadata) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationScopeWithMetadata) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationScopeWithMetadata) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationScopeWithMetadata) SetName(v string) {
	o.Name = &v
}

func (o ApplicationScopeWithMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationScopeWithMetadata struct {
	value *ApplicationScopeWithMetadata
	isSet bool
}

func (v NullableApplicationScopeWithMetadata) Get() *ApplicationScopeWithMetadata {
	return v.value
}

func (v *NullableApplicationScopeWithMetadata) Set(val *ApplicationScopeWithMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationScopeWithMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationScopeWithMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationScopeWithMetadata(val *ApplicationScopeWithMetadata) *NullableApplicationScopeWithMetadata {
	return &NullableApplicationScopeWithMetadata{value: val, isSet: true}
}

func (v NullableApplicationScopeWithMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationScopeWithMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
