/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// SyntheticCallConfig struct for SyntheticCallConfig
type SyntheticCallConfig struct {
	DefaultRulesEnabled *bool               `json:"defaultRulesEnabled,omitempty"`
	CustomRules         []SyntheticCallRule `json:"customRules"`
}

// NewSyntheticCallConfig instantiates a new SyntheticCallConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticCallConfig(customRules []SyntheticCallRule) *SyntheticCallConfig {
	this := SyntheticCallConfig{}
	this.CustomRules = customRules
	return &this
}

// NewSyntheticCallConfigWithDefaults instantiates a new SyntheticCallConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticCallConfigWithDefaults() *SyntheticCallConfig {
	this := SyntheticCallConfig{}
	return &this
}

// GetDefaultRulesEnabled returns the DefaultRulesEnabled field value if set, zero value otherwise.
func (o *SyntheticCallConfig) GetDefaultRulesEnabled() bool {
	if o == nil || o.DefaultRulesEnabled == nil {
		var ret bool
		return ret
	}
	return *o.DefaultRulesEnabled
}

// GetDefaultRulesEnabledOk returns a tuple with the DefaultRulesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticCallConfig) GetDefaultRulesEnabledOk() (*bool, bool) {
	if o == nil || o.DefaultRulesEnabled == nil {
		return nil, false
	}
	return o.DefaultRulesEnabled, true
}

// HasDefaultRulesEnabled returns a boolean if a field has been set.
func (o *SyntheticCallConfig) HasDefaultRulesEnabled() bool {
	if o != nil && o.DefaultRulesEnabled != nil {
		return true
	}

	return false
}

// SetDefaultRulesEnabled gets a reference to the given bool and assigns it to the DefaultRulesEnabled field.
func (o *SyntheticCallConfig) SetDefaultRulesEnabled(v bool) {
	o.DefaultRulesEnabled = &v
}

// GetCustomRules returns the CustomRules field value
func (o *SyntheticCallConfig) GetCustomRules() []SyntheticCallRule {
	if o == nil {
		var ret []SyntheticCallRule
		return ret
	}

	return o.CustomRules
}

// GetCustomRulesOk returns a tuple with the CustomRules field value
// and a boolean to check if the value has been set.
func (o *SyntheticCallConfig) GetCustomRulesOk() (*[]SyntheticCallRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomRules, true
}

// SetCustomRules sets field value
func (o *SyntheticCallConfig) SetCustomRules(v []SyntheticCallRule) {
	o.CustomRules = v
}

func (o SyntheticCallConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultRulesEnabled != nil {
		toSerialize["defaultRulesEnabled"] = o.DefaultRulesEnabled
	}
	if true {
		toSerialize["customRules"] = o.CustomRules
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticCallConfig struct {
	value *SyntheticCallConfig
	isSet bool
}

func (v NullableSyntheticCallConfig) Get() *SyntheticCallConfig {
	return v.value
}

func (v *NullableSyntheticCallConfig) Set(val *SyntheticCallConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticCallConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticCallConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticCallConfig(val *SyntheticCallConfig) *NullableSyntheticCallConfig {
	return &NullableSyntheticCallConfig{value: val, isSet: true}
}

func (v NullableSyntheticCallConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticCallConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
