/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// SpanRelation struct for SpanRelation
type SpanRelation struct {
	Applications    []Application    `json:"applications"`
	Service         *Service         `json:"service,omitempty"`
	Endpoint        *Endpoint        `json:"endpoint,omitempty"`
	PhysicalContext *PhysicalContext `json:"physicalContext,omitempty"`
}

// NewSpanRelation instantiates a new SpanRelation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanRelation(applications []Application) *SpanRelation {
	this := SpanRelation{}
	this.Applications = applications
	return &this
}

// NewSpanRelationWithDefaults instantiates a new SpanRelation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanRelationWithDefaults() *SpanRelation {
	this := SpanRelation{}
	return &this
}

// GetApplications returns the Applications field value
func (o *SpanRelation) GetApplications() []Application {
	if o == nil {
		var ret []Application
		return ret
	}

	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value
// and a boolean to check if the value has been set.
func (o *SpanRelation) GetApplicationsOk() (*[]Application, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Applications, true
}

// SetApplications sets field value
func (o *SpanRelation) SetApplications(v []Application) {
	o.Applications = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *SpanRelation) GetService() Service {
	if o == nil || o.Service == nil {
		var ret Service
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanRelation) GetServiceOk() (*Service, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *SpanRelation) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given Service and assigns it to the Service field.
func (o *SpanRelation) SetService(v Service) {
	o.Service = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *SpanRelation) GetEndpoint() Endpoint {
	if o == nil || o.Endpoint == nil {
		var ret Endpoint
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanRelation) GetEndpointOk() (*Endpoint, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *SpanRelation) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given Endpoint and assigns it to the Endpoint field.
func (o *SpanRelation) SetEndpoint(v Endpoint) {
	o.Endpoint = &v
}

// GetPhysicalContext returns the PhysicalContext field value if set, zero value otherwise.
func (o *SpanRelation) GetPhysicalContext() PhysicalContext {
	if o == nil || o.PhysicalContext == nil {
		var ret PhysicalContext
		return ret
	}
	return *o.PhysicalContext
}

// GetPhysicalContextOk returns a tuple with the PhysicalContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanRelation) GetPhysicalContextOk() (*PhysicalContext, bool) {
	if o == nil || o.PhysicalContext == nil {
		return nil, false
	}
	return o.PhysicalContext, true
}

// HasPhysicalContext returns a boolean if a field has been set.
func (o *SpanRelation) HasPhysicalContext() bool {
	if o != nil && o.PhysicalContext != nil {
		return true
	}

	return false
}

// SetPhysicalContext gets a reference to the given PhysicalContext and assigns it to the PhysicalContext field.
func (o *SpanRelation) SetPhysicalContext(v PhysicalContext) {
	o.PhysicalContext = &v
}

func (o SpanRelation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["applications"] = o.Applications
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	if o.PhysicalContext != nil {
		toSerialize["physicalContext"] = o.PhysicalContext
	}
	return json.Marshal(toSerialize)
}

type NullableSpanRelation struct {
	value *SpanRelation
	isSet bool
}

func (v NullableSpanRelation) Get() *SpanRelation {
	return v.value
}

func (v *NullableSpanRelation) Set(val *SpanRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanRelation(val *SpanRelation) *NullableSpanRelation {
	return &NullableSpanRelation{value: val, isSet: true}
}

func (v NullableSpanRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
