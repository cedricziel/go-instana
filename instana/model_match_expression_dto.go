/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// MatchExpressionDTO struct for MatchExpressionDTO
type MatchExpressionDTO struct {
	Type *string `json:"type,omitempty"`
}

// NewMatchExpressionDTO instantiates a new MatchExpressionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchExpressionDTO() *MatchExpressionDTO {
	this := MatchExpressionDTO{}
	return &this
}

// NewMatchExpressionDTOWithDefaults instantiates a new MatchExpressionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchExpressionDTOWithDefaults() *MatchExpressionDTO {
	this := MatchExpressionDTO{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MatchExpressionDTO) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchExpressionDTO) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MatchExpressionDTO) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MatchExpressionDTO) SetType(v string) {
	o.Type = &v
}

func (o MatchExpressionDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMatchExpressionDTO struct {
	value *MatchExpressionDTO
	isSet bool
}

func (v NullableMatchExpressionDTO) Get() *MatchExpressionDTO {
	return v.value
}

func (v *NullableMatchExpressionDTO) Set(val *MatchExpressionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchExpressionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchExpressionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchExpressionDTO(val *MatchExpressionDTO) *NullableMatchExpressionDTO {
	return &NullableMatchExpressionDTO{value: val, isSet: true}
}

func (v NullableMatchExpressionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchExpressionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
