/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// Tag struct for Tag
type Tag struct {
	Name                  string  `json:"name"`
	Label                 *string `json:"label,omitempty"`
	Type                  string  `json:"type"`
	Description           *string `json:"description,omitempty"`
	CanApplyToSource      *bool   `json:"canApplyToSource,omitempty"`
	CanApplyToDestination *bool   `json:"canApplyToDestination,omitempty"`
}

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag(name string, type_ string) *Tag {
	this := Tag{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	return &this
}

// GetName returns the Name field value
func (o *Tag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tag) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Tag) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Tag) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Tag) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value
func (o *Tag) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Tag) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Tag) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Tag) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Tag) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Tag) SetDescription(v string) {
	o.Description = &v
}

// GetCanApplyToSource returns the CanApplyToSource field value if set, zero value otherwise.
func (o *Tag) GetCanApplyToSource() bool {
	if o == nil || o.CanApplyToSource == nil {
		var ret bool
		return ret
	}
	return *o.CanApplyToSource
}

// GetCanApplyToSourceOk returns a tuple with the CanApplyToSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetCanApplyToSourceOk() (*bool, bool) {
	if o == nil || o.CanApplyToSource == nil {
		return nil, false
	}
	return o.CanApplyToSource, true
}

// HasCanApplyToSource returns a boolean if a field has been set.
func (o *Tag) HasCanApplyToSource() bool {
	if o != nil && o.CanApplyToSource != nil {
		return true
	}

	return false
}

// SetCanApplyToSource gets a reference to the given bool and assigns it to the CanApplyToSource field.
func (o *Tag) SetCanApplyToSource(v bool) {
	o.CanApplyToSource = &v
}

// GetCanApplyToDestination returns the CanApplyToDestination field value if set, zero value otherwise.
func (o *Tag) GetCanApplyToDestination() bool {
	if o == nil || o.CanApplyToDestination == nil {
		var ret bool
		return ret
	}
	return *o.CanApplyToDestination
}

// GetCanApplyToDestinationOk returns a tuple with the CanApplyToDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tag) GetCanApplyToDestinationOk() (*bool, bool) {
	if o == nil || o.CanApplyToDestination == nil {
		return nil, false
	}
	return o.CanApplyToDestination, true
}

// HasCanApplyToDestination returns a boolean if a field has been set.
func (o *Tag) HasCanApplyToDestination() bool {
	if o != nil && o.CanApplyToDestination != nil {
		return true
	}

	return false
}

// SetCanApplyToDestination gets a reference to the given bool and assigns it to the CanApplyToDestination field.
func (o *Tag) SetCanApplyToDestination(v bool) {
	o.CanApplyToDestination = &v
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.CanApplyToSource != nil {
		toSerialize["canApplyToSource"] = o.CanApplyToSource
	}
	if o.CanApplyToDestination != nil {
		toSerialize["canApplyToDestination"] = o.CanApplyToDestination
	}
	return json.Marshal(toSerialize)
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
