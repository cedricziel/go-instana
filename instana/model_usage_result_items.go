/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// UsageResultItems struct for UsageResultItems
type UsageResultItems struct {
	Name *string `json:"name,omitempty"`
	Sims *int64  `json:"sims,omitempty"`
}

// NewUsageResultItems instantiates a new UsageResultItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageResultItems() *UsageResultItems {
	this := UsageResultItems{}
	return &this
}

// NewUsageResultItemsWithDefaults instantiates a new UsageResultItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageResultItemsWithDefaults() *UsageResultItems {
	this := UsageResultItems{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UsageResultItems) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResultItems) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UsageResultItems) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UsageResultItems) SetName(v string) {
	o.Name = &v
}

// GetSims returns the Sims field value if set, zero value otherwise.
func (o *UsageResultItems) GetSims() int64 {
	if o == nil || o.Sims == nil {
		var ret int64
		return ret
	}
	return *o.Sims
}

// GetSimsOk returns a tuple with the Sims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResultItems) GetSimsOk() (*int64, bool) {
	if o == nil || o.Sims == nil {
		return nil, false
	}
	return o.Sims, true
}

// HasSims returns a boolean if a field has been set.
func (o *UsageResultItems) HasSims() bool {
	if o != nil && o.Sims != nil {
		return true
	}

	return false
}

// SetSims gets a reference to the given int64 and assigns it to the Sims field.
func (o *UsageResultItems) SetSims(v int64) {
	o.Sims = &v
}

func (o UsageResultItems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Sims != nil {
		toSerialize["sims"] = o.Sims
	}
	return json.Marshal(toSerialize)
}

type NullableUsageResultItems struct {
	value *UsageResultItems
	isSet bool
}

func (v NullableUsageResultItems) Get() *UsageResultItems {
	return v.value
}

func (v *NullableUsageResultItems) Set(val *UsageResultItems) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageResultItems) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageResultItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageResultItems(val *UsageResultItems) *NullableUsageResultItems {
	return &NullableUsageResultItems{value: val, isSet: true}
}

func (v NullableUsageResultItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageResultItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
