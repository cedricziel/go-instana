/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// MonitoringState struct for MonitoringState
type MonitoringState struct {
	FirstKnownReportingTime *int64 `json:"firstKnownReportingTime,omitempty"`
	HostCount               *int32 `json:"hostCount,omitempty"`
	ServerlessCount         *int32 `json:"serverlessCount,omitempty"`
}

// NewMonitoringState instantiates a new MonitoringState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringState() *MonitoringState {
	this := MonitoringState{}
	return &this
}

// NewMonitoringStateWithDefaults instantiates a new MonitoringState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringStateWithDefaults() *MonitoringState {
	this := MonitoringState{}
	return &this
}

// GetFirstKnownReportingTime returns the FirstKnownReportingTime field value if set, zero value otherwise.
func (o *MonitoringState) GetFirstKnownReportingTime() int64 {
	if o == nil || o.FirstKnownReportingTime == nil {
		var ret int64
		return ret
	}
	return *o.FirstKnownReportingTime
}

// GetFirstKnownReportingTimeOk returns a tuple with the FirstKnownReportingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringState) GetFirstKnownReportingTimeOk() (*int64, bool) {
	if o == nil || o.FirstKnownReportingTime == nil {
		return nil, false
	}
	return o.FirstKnownReportingTime, true
}

// HasFirstKnownReportingTime returns a boolean if a field has been set.
func (o *MonitoringState) HasFirstKnownReportingTime() bool {
	if o != nil && o.FirstKnownReportingTime != nil {
		return true
	}

	return false
}

// SetFirstKnownReportingTime gets a reference to the given int64 and assigns it to the FirstKnownReportingTime field.
func (o *MonitoringState) SetFirstKnownReportingTime(v int64) {
	o.FirstKnownReportingTime = &v
}

// GetHostCount returns the HostCount field value if set, zero value otherwise.
func (o *MonitoringState) GetHostCount() int32 {
	if o == nil || o.HostCount == nil {
		var ret int32
		return ret
	}
	return *o.HostCount
}

// GetHostCountOk returns a tuple with the HostCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringState) GetHostCountOk() (*int32, bool) {
	if o == nil || o.HostCount == nil {
		return nil, false
	}
	return o.HostCount, true
}

// HasHostCount returns a boolean if a field has been set.
func (o *MonitoringState) HasHostCount() bool {
	if o != nil && o.HostCount != nil {
		return true
	}

	return false
}

// SetHostCount gets a reference to the given int32 and assigns it to the HostCount field.
func (o *MonitoringState) SetHostCount(v int32) {
	o.HostCount = &v
}

// GetServerlessCount returns the ServerlessCount field value if set, zero value otherwise.
func (o *MonitoringState) GetServerlessCount() int32 {
	if o == nil || o.ServerlessCount == nil {
		var ret int32
		return ret
	}
	return *o.ServerlessCount
}

// GetServerlessCountOk returns a tuple with the ServerlessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringState) GetServerlessCountOk() (*int32, bool) {
	if o == nil || o.ServerlessCount == nil {
		return nil, false
	}
	return o.ServerlessCount, true
}

// HasServerlessCount returns a boolean if a field has been set.
func (o *MonitoringState) HasServerlessCount() bool {
	if o != nil && o.ServerlessCount != nil {
		return true
	}

	return false
}

// SetServerlessCount gets a reference to the given int32 and assigns it to the ServerlessCount field.
func (o *MonitoringState) SetServerlessCount(v int32) {
	o.ServerlessCount = &v
}

func (o MonitoringState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstKnownReportingTime != nil {
		toSerialize["firstKnownReportingTime"] = o.FirstKnownReportingTime
	}
	if o.HostCount != nil {
		toSerialize["hostCount"] = o.HostCount
	}
	if o.ServerlessCount != nil {
		toSerialize["serverlessCount"] = o.ServerlessCount
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringState struct {
	value *MonitoringState
	isSet bool
}

func (v NullableMonitoringState) Get() *MonitoringState {
	return v.value
}

func (v *NullableMonitoringState) Set(val *MonitoringState) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringState) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringState(val *MonitoringState) *NullableMonitoringState {
	return &NullableMonitoringState{value: val, isSet: true}
}

func (v NullableMonitoringState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
