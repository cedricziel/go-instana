/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// HyperParam struct for HyperParam
type HyperParam struct {
	Id           string   `json:"id"`
	Name         string   `json:"name"`
	Description  string   `json:"description"`
	DefaultValue *float64 `json:"defaultValue,omitempty"`
	MinValue     *float64 `json:"minValue,omitempty"`
	MaxValue     *float64 `json:"maxValue,omitempty"`
	ValueFormat  *string  `json:"valueFormat,omitempty"`
}

// NewHyperParam instantiates a new HyperParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperParam(id string, name string, description string) *HyperParam {
	this := HyperParam{}
	this.Id = id
	this.Name = name
	this.Description = description
	return &this
}

// NewHyperParamWithDefaults instantiates a new HyperParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperParamWithDefaults() *HyperParam {
	this := HyperParam{}
	return &this
}

// GetId returns the Id field value
func (o *HyperParam) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HyperParam) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HyperParam) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *HyperParam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HyperParam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HyperParam) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *HyperParam) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *HyperParam) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *HyperParam) SetDescription(v string) {
	o.Description = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *HyperParam) GetDefaultValue() float64 {
	if o == nil || o.DefaultValue == nil {
		var ret float64
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperParam) GetDefaultValueOk() (*float64, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *HyperParam) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given float64 and assigns it to the DefaultValue field.
func (o *HyperParam) SetDefaultValue(v float64) {
	o.DefaultValue = &v
}

// GetMinValue returns the MinValue field value if set, zero value otherwise.
func (o *HyperParam) GetMinValue() float64 {
	if o == nil || o.MinValue == nil {
		var ret float64
		return ret
	}
	return *o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperParam) GetMinValueOk() (*float64, bool) {
	if o == nil || o.MinValue == nil {
		return nil, false
	}
	return o.MinValue, true
}

// HasMinValue returns a boolean if a field has been set.
func (o *HyperParam) HasMinValue() bool {
	if o != nil && o.MinValue != nil {
		return true
	}

	return false
}

// SetMinValue gets a reference to the given float64 and assigns it to the MinValue field.
func (o *HyperParam) SetMinValue(v float64) {
	o.MinValue = &v
}

// GetMaxValue returns the MaxValue field value if set, zero value otherwise.
func (o *HyperParam) GetMaxValue() float64 {
	if o == nil || o.MaxValue == nil {
		var ret float64
		return ret
	}
	return *o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperParam) GetMaxValueOk() (*float64, bool) {
	if o == nil || o.MaxValue == nil {
		return nil, false
	}
	return o.MaxValue, true
}

// HasMaxValue returns a boolean if a field has been set.
func (o *HyperParam) HasMaxValue() bool {
	if o != nil && o.MaxValue != nil {
		return true
	}

	return false
}

// SetMaxValue gets a reference to the given float64 and assigns it to the MaxValue field.
func (o *HyperParam) SetMaxValue(v float64) {
	o.MaxValue = &v
}

// GetValueFormat returns the ValueFormat field value if set, zero value otherwise.
func (o *HyperParam) GetValueFormat() string {
	if o == nil || o.ValueFormat == nil {
		var ret string
		return ret
	}
	return *o.ValueFormat
}

// GetValueFormatOk returns a tuple with the ValueFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperParam) GetValueFormatOk() (*string, bool) {
	if o == nil || o.ValueFormat == nil {
		return nil, false
	}
	return o.ValueFormat, true
}

// HasValueFormat returns a boolean if a field has been set.
func (o *HyperParam) HasValueFormat() bool {
	if o != nil && o.ValueFormat != nil {
		return true
	}

	return false
}

// SetValueFormat gets a reference to the given string and assigns it to the ValueFormat field.
func (o *HyperParam) SetValueFormat(v string) {
	o.ValueFormat = &v
}

func (o HyperParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.MinValue != nil {
		toSerialize["minValue"] = o.MinValue
	}
	if o.MaxValue != nil {
		toSerialize["maxValue"] = o.MaxValue
	}
	if o.ValueFormat != nil {
		toSerialize["valueFormat"] = o.ValueFormat
	}
	return json.Marshal(toSerialize)
}

type NullableHyperParam struct {
	value *HyperParam
	isSet bool
}

func (v NullableHyperParam) Get() *HyperParam {
	return v.value
}

func (v *NullableHyperParam) Set(val *HyperParam) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperParam) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperParam(val *HyperParam) *NullableHyperParam {
	return &NullableHyperParam{value: val, isSet: true}
}

func (v NullableHyperParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
