/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// NewApplicationConfig struct for NewApplicationConfig
type NewApplicationConfig struct {
	Label              string             `json:"label"`
	MatchSpecification MatchExpressionDTO `json:"matchSpecification"`
	Scope              string             `json:"scope"`
	BoundaryScope      string             `json:"boundaryScope"`
}

// NewNewApplicationConfig instantiates a new NewApplicationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewApplicationConfig(label string, matchSpecification MatchExpressionDTO, scope string, boundaryScope string) *NewApplicationConfig {
	this := NewApplicationConfig{}
	this.Label = label
	this.MatchSpecification = matchSpecification
	this.Scope = scope
	this.BoundaryScope = boundaryScope
	return &this
}

// NewNewApplicationConfigWithDefaults instantiates a new NewApplicationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewApplicationConfigWithDefaults() *NewApplicationConfig {
	this := NewApplicationConfig{}
	return &this
}

// GetLabel returns the Label field value
func (o *NewApplicationConfig) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *NewApplicationConfig) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *NewApplicationConfig) SetLabel(v string) {
	o.Label = v
}

// GetMatchSpecification returns the MatchSpecification field value
func (o *NewApplicationConfig) GetMatchSpecification() MatchExpressionDTO {
	if o == nil {
		var ret MatchExpressionDTO
		return ret
	}

	return o.MatchSpecification
}

// GetMatchSpecificationOk returns a tuple with the MatchSpecification field value
// and a boolean to check if the value has been set.
func (o *NewApplicationConfig) GetMatchSpecificationOk() (*MatchExpressionDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchSpecification, true
}

// SetMatchSpecification sets field value
func (o *NewApplicationConfig) SetMatchSpecification(v MatchExpressionDTO) {
	o.MatchSpecification = v
}

// GetScope returns the Scope field value
func (o *NewApplicationConfig) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *NewApplicationConfig) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *NewApplicationConfig) SetScope(v string) {
	o.Scope = v
}

// GetBoundaryScope returns the BoundaryScope field value
func (o *NewApplicationConfig) GetBoundaryScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BoundaryScope
}

// GetBoundaryScopeOk returns a tuple with the BoundaryScope field value
// and a boolean to check if the value has been set.
func (o *NewApplicationConfig) GetBoundaryScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BoundaryScope, true
}

// SetBoundaryScope sets field value
func (o *NewApplicationConfig) SetBoundaryScope(v string) {
	o.BoundaryScope = v
}

func (o NewApplicationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["matchSpecification"] = o.MatchSpecification
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	if true {
		toSerialize["boundaryScope"] = o.BoundaryScope
	}
	return json.Marshal(toSerialize)
}

type NullableNewApplicationConfig struct {
	value *NewApplicationConfig
	isSet bool
}

func (v NullableNewApplicationConfig) Get() *NewApplicationConfig {
	return v.value
}

func (v *NullableNewApplicationConfig) Set(val *NewApplicationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNewApplicationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNewApplicationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewApplicationConfig(val *NewApplicationConfig) *NullableNewApplicationConfig {
	return &NullableNewApplicationConfig{value: val, isSet: true}
}

func (v NullableNewApplicationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewApplicationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
