/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// SystemRule struct for SystemRule
type SystemRule struct {
	AbstractRule
	SystemRuleId string `json:"systemRuleId"`
}

// NewSystemRule instantiates a new SystemRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemRule(systemRuleId string) *SystemRule {
	this := SystemRule{}
	this.SystemRuleId = systemRuleId
	return &this
}

// NewSystemRuleWithDefaults instantiates a new SystemRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemRuleWithDefaults() *SystemRule {
	this := SystemRule{}
	return &this
}

// GetSystemRuleId returns the SystemRuleId field value
func (o *SystemRule) GetSystemRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemRuleId
}

// GetSystemRuleIdOk returns a tuple with the SystemRuleId field value
// and a boolean to check if the value has been set.
func (o *SystemRule) GetSystemRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemRuleId, true
}

// SetSystemRuleId sets field value
func (o *SystemRule) SetSystemRuleId(v string) {
	o.SystemRuleId = v
}

func (o SystemRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAbstractRule, errAbstractRule := json.Marshal(o.AbstractRule)
	if errAbstractRule != nil {
		return []byte{}, errAbstractRule
	}
	errAbstractRule = json.Unmarshal([]byte(serializedAbstractRule), &toSerialize)
	if errAbstractRule != nil {
		return []byte{}, errAbstractRule
	}
	if true {
		toSerialize["systemRuleId"] = o.SystemRuleId
	}
	return json.Marshal(toSerialize)
}

type NullableSystemRule struct {
	value *SystemRule
	isSet bool
}

func (v NullableSystemRule) Get() *SystemRule {
	return v.value
}

func (v *NullableSystemRule) Set(val *SystemRule) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemRule) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemRule(val *SystemRule) *NullableSystemRule {
	return &NullableSystemRule{value: val, isSet: true}
}

func (v NullableSystemRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
