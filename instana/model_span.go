/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// Span struct for Span
type Span struct {
	Id                 string                 `json:"id"`
	ParentId           *string                `json:"parentId,omitempty"`
	CallId             string                 `json:"callId"`
	Name               string                 `json:"name"`
	Label              string                 `json:"label"`
	Start              *int64                 `json:"start,omitempty"`
	Duration           *int64                 `json:"duration,omitempty"`
	CalculatedSelfTime *int64                 `json:"calculatedSelfTime,omitempty"`
	ErrorCount         *int32                 `json:"errorCount,omitempty"`
	BatchSize          *int32                 `json:"batchSize,omitempty"`
	BatchSelfTime      *int64                 `json:"batchSelfTime,omitempty"`
	Kind               string                 `json:"kind"`
	IsSynthetic        *bool                  `json:"isSynthetic,omitempty"`
	Data               map[string]interface{} `json:"data"`
	Source             *SpanRelation          `json:"source,omitempty"`
	Destination        *SpanRelation          `json:"destination,omitempty"`
	StackTrace         []StackTraceItem       `json:"stackTrace"`
	ChildSpans         []Span                 `json:"childSpans"`
}

// NewSpan instantiates a new Span object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpan(id string, callId string, name string, label string, kind string, data map[string]interface{}, stackTrace []StackTraceItem, childSpans []Span) *Span {
	this := Span{}
	this.Id = id
	this.CallId = callId
	this.Name = name
	this.Label = label
	this.Kind = kind
	this.Data = data
	this.StackTrace = stackTrace
	this.ChildSpans = childSpans
	return &this
}

// NewSpanWithDefaults instantiates a new Span object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanWithDefaults() *Span {
	this := Span{}
	return &this
}

// GetId returns the Id field value
func (o *Span) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Span) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Span) SetId(v string) {
	o.Id = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Span) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Span) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Span) SetParentId(v string) {
	o.ParentId = &v
}

// GetCallId returns the CallId field value
func (o *Span) GetCallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value
// and a boolean to check if the value has been set.
func (o *Span) GetCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallId, true
}

// SetCallId sets field value
func (o *Span) SetCallId(v string) {
	o.CallId = v
}

// GetName returns the Name field value
func (o *Span) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Span) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Span) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value
func (o *Span) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Span) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Span) SetLabel(v string) {
	o.Label = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Span) GetStart() int64 {
	if o == nil || o.Start == nil {
		var ret int64
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetStartOk() (*int64, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Span) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given int64 and assigns it to the Start field.
func (o *Span) SetStart(v int64) {
	o.Start = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Span) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Span) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *Span) SetDuration(v int64) {
	o.Duration = &v
}

// GetCalculatedSelfTime returns the CalculatedSelfTime field value if set, zero value otherwise.
func (o *Span) GetCalculatedSelfTime() int64 {
	if o == nil || o.CalculatedSelfTime == nil {
		var ret int64
		return ret
	}
	return *o.CalculatedSelfTime
}

// GetCalculatedSelfTimeOk returns a tuple with the CalculatedSelfTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetCalculatedSelfTimeOk() (*int64, bool) {
	if o == nil || o.CalculatedSelfTime == nil {
		return nil, false
	}
	return o.CalculatedSelfTime, true
}

// HasCalculatedSelfTime returns a boolean if a field has been set.
func (o *Span) HasCalculatedSelfTime() bool {
	if o != nil && o.CalculatedSelfTime != nil {
		return true
	}

	return false
}

// SetCalculatedSelfTime gets a reference to the given int64 and assigns it to the CalculatedSelfTime field.
func (o *Span) SetCalculatedSelfTime(v int64) {
	o.CalculatedSelfTime = &v
}

// GetErrorCount returns the ErrorCount field value if set, zero value otherwise.
func (o *Span) GetErrorCount() int32 {
	if o == nil || o.ErrorCount == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetErrorCountOk() (*int32, bool) {
	if o == nil || o.ErrorCount == nil {
		return nil, false
	}
	return o.ErrorCount, true
}

// HasErrorCount returns a boolean if a field has been set.
func (o *Span) HasErrorCount() bool {
	if o != nil && o.ErrorCount != nil {
		return true
	}

	return false
}

// SetErrorCount gets a reference to the given int32 and assigns it to the ErrorCount field.
func (o *Span) SetErrorCount(v int32) {
	o.ErrorCount = &v
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise.
func (o *Span) GetBatchSize() int32 {
	if o == nil || o.BatchSize == nil {
		var ret int32
		return ret
	}
	return *o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetBatchSizeOk() (*int32, bool) {
	if o == nil || o.BatchSize == nil {
		return nil, false
	}
	return o.BatchSize, true
}

// HasBatchSize returns a boolean if a field has been set.
func (o *Span) HasBatchSize() bool {
	if o != nil && o.BatchSize != nil {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given int32 and assigns it to the BatchSize field.
func (o *Span) SetBatchSize(v int32) {
	o.BatchSize = &v
}

// GetBatchSelfTime returns the BatchSelfTime field value if set, zero value otherwise.
func (o *Span) GetBatchSelfTime() int64 {
	if o == nil || o.BatchSelfTime == nil {
		var ret int64
		return ret
	}
	return *o.BatchSelfTime
}

// GetBatchSelfTimeOk returns a tuple with the BatchSelfTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetBatchSelfTimeOk() (*int64, bool) {
	if o == nil || o.BatchSelfTime == nil {
		return nil, false
	}
	return o.BatchSelfTime, true
}

// HasBatchSelfTime returns a boolean if a field has been set.
func (o *Span) HasBatchSelfTime() bool {
	if o != nil && o.BatchSelfTime != nil {
		return true
	}

	return false
}

// SetBatchSelfTime gets a reference to the given int64 and assigns it to the BatchSelfTime field.
func (o *Span) SetBatchSelfTime(v int64) {
	o.BatchSelfTime = &v
}

// GetKind returns the Kind field value
func (o *Span) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Span) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *Span) SetKind(v string) {
	o.Kind = v
}

// GetIsSynthetic returns the IsSynthetic field value if set, zero value otherwise.
func (o *Span) GetIsSynthetic() bool {
	if o == nil || o.IsSynthetic == nil {
		var ret bool
		return ret
	}
	return *o.IsSynthetic
}

// GetIsSyntheticOk returns a tuple with the IsSynthetic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetIsSyntheticOk() (*bool, bool) {
	if o == nil || o.IsSynthetic == nil {
		return nil, false
	}
	return o.IsSynthetic, true
}

// HasIsSynthetic returns a boolean if a field has been set.
func (o *Span) HasIsSynthetic() bool {
	if o != nil && o.IsSynthetic != nil {
		return true
	}

	return false
}

// SetIsSynthetic gets a reference to the given bool and assigns it to the IsSynthetic field.
func (o *Span) SetIsSynthetic(v bool) {
	o.IsSynthetic = &v
}

// GetData returns the Data field value
func (o *Span) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Span) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *Span) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Span) GetSource() SpanRelation {
	if o == nil || o.Source == nil {
		var ret SpanRelation
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetSourceOk() (*SpanRelation, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Span) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given SpanRelation and assigns it to the Source field.
func (o *Span) SetSource(v SpanRelation) {
	o.Source = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *Span) GetDestination() SpanRelation {
	if o == nil || o.Destination == nil {
		var ret SpanRelation
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetDestinationOk() (*SpanRelation, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *Span) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given SpanRelation and assigns it to the Destination field.
func (o *Span) SetDestination(v SpanRelation) {
	o.Destination = &v
}

// GetStackTrace returns the StackTrace field value
func (o *Span) GetStackTrace() []StackTraceItem {
	if o == nil {
		var ret []StackTraceItem
		return ret
	}

	return o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value
// and a boolean to check if the value has been set.
func (o *Span) GetStackTraceOk() (*[]StackTraceItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackTrace, true
}

// SetStackTrace sets field value
func (o *Span) SetStackTrace(v []StackTraceItem) {
	o.StackTrace = v
}

// GetChildSpans returns the ChildSpans field value
func (o *Span) GetChildSpans() []Span {
	if o == nil {
		var ret []Span
		return ret
	}

	return o.ChildSpans
}

// GetChildSpansOk returns a tuple with the ChildSpans field value
// and a boolean to check if the value has been set.
func (o *Span) GetChildSpansOk() (*[]Span, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChildSpans, true
}

// SetChildSpans sets field value
func (o *Span) SetChildSpans(v []Span) {
	o.ChildSpans = v
}

func (o Span) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	if true {
		toSerialize["callId"] = o.CallId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.CalculatedSelfTime != nil {
		toSerialize["calculatedSelfTime"] = o.CalculatedSelfTime
	}
	if o.ErrorCount != nil {
		toSerialize["errorCount"] = o.ErrorCount
	}
	if o.BatchSize != nil {
		toSerialize["batchSize"] = o.BatchSize
	}
	if o.BatchSelfTime != nil {
		toSerialize["batchSelfTime"] = o.BatchSelfTime
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if o.IsSynthetic != nil {
		toSerialize["isSynthetic"] = o.IsSynthetic
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if true {
		toSerialize["stackTrace"] = o.StackTrace
	}
	if true {
		toSerialize["childSpans"] = o.ChildSpans
	}
	return json.Marshal(toSerialize)
}

type NullableSpan struct {
	value *Span
	isSet bool
}

func (v NullableSpan) Get() *Span {
	return v.value
}

func (v *NullableSpan) Set(val *Span) {
	v.value = val
	v.isSet = true
}

func (v NullableSpan) IsSet() bool {
	return v.isSet
}

func (v *NullableSpan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpan(val *Span) *NullableSpan {
	return &NullableSpan{value: val, isSet: true}
}

func (v NullableSpan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
