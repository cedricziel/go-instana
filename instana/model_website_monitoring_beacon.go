/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// WebsiteMonitoringBeacon struct for WebsiteMonitoringBeacon
type WebsiteMonitoringBeacon struct {
	WebsiteId                    string             `json:"websiteId"`
	WebsiteLabel                 string             `json:"websiteLabel"`
	Page                         *string            `json:"page,omitempty"`
	Phase                        *string            `json:"phase,omitempty"`
	Timestamp                    *int64             `json:"timestamp,omitempty"`
	ClockSkew                    *int64             `json:"clockSkew,omitempty"`
	Duration                     *int64             `json:"duration,omitempty"`
	BatchSize                    *int64             `json:"batchSize,omitempty"`
	AccurateTimingsAvailable     *bool              `json:"accurateTimingsAvailable,omitempty"`
	Deprecations                 *[]string          `json:"deprecations,omitempty"`
	PageLoadId                   string             `json:"pageLoadId"`
	SessionId                    *string            `json:"sessionId,omitempty"`
	BeaconId                     string             `json:"beaconId"`
	BackendTraceId               *string            `json:"backendTraceId,omitempty"`
	Type                         string             `json:"type"`
	CustomEventName              *string            `json:"customEventName,omitempty"`
	Meta                         *map[string]string `json:"meta,omitempty"`
	LocationUrl                  string             `json:"locationUrl"`
	LocationOrigin               string             `json:"locationOrigin"`
	LocationPath                 *string            `json:"locationPath,omitempty"`
	ErrorCount                   *int64             `json:"errorCount,omitempty"`
	ErrorMessage                 *string            `json:"errorMessage,omitempty"`
	ErrorId                      *string            `json:"errorId,omitempty"`
	ErrorType                    *string            `json:"errorType,omitempty"`
	StackTrace                   *string            `json:"stackTrace,omitempty"`
	StackTraceParsingStatus      *int32             `json:"stackTraceParsingStatus,omitempty"`
	ParsedStackTrace             *[]StackTraceLine  `json:"parsedStackTrace,omitempty"`
	StackTraceReadability        *int32             `json:"stackTraceReadability,omitempty"`
	ComponentStack               *string            `json:"componentStack,omitempty"`
	UserIp                       *string            `json:"userIp,omitempty"`
	UserId                       *string            `json:"userId,omitempty"`
	UserName                     *string            `json:"userName,omitempty"`
	UserEmail                    *string            `json:"userEmail,omitempty"`
	UserLanguages                *[]string          `json:"userLanguages,omitempty"`
	DeviceType                   *string            `json:"deviceType,omitempty"`
	ConnectionType               *string            `json:"connectionType,omitempty"`
	BrowserName                  *string            `json:"browserName,omitempty"`
	BrowserVersion               *string            `json:"browserVersion,omitempty"`
	OsName                       *string            `json:"osName,omitempty"`
	OsVersion                    *string            `json:"osVersion,omitempty"`
	WindowHidden                 *bool              `json:"windowHidden,omitempty"`
	WindowWidth                  *int32             `json:"windowWidth,omitempty"`
	WindowHeight                 *int32             `json:"windowHeight,omitempty"`
	Latitude                     *float64           `json:"latitude,omitempty"`
	Longitude                    *float64           `json:"longitude,omitempty"`
	AccuracyRadius               *int64             `json:"accuracyRadius,omitempty"`
	City                         *string            `json:"city,omitempty"`
	Subdivision                  *string            `json:"subdivision,omitempty"`
	SubdivisionCode              *string            `json:"subdivisionCode,omitempty"`
	Country                      *string            `json:"country,omitempty"`
	CountryCode                  *string            `json:"countryCode,omitempty"`
	Continent                    *string            `json:"continent,omitempty"`
	ContinentCode                *string            `json:"continentCode,omitempty"`
	HttpCallUrl                  *string            `json:"httpCallUrl,omitempty"`
	HttpCallOrigin               *string            `json:"httpCallOrigin,omitempty"`
	HttpCallPath                 *string            `json:"httpCallPath,omitempty"`
	HttpCallMethod               *string            `json:"httpCallMethod,omitempty"`
	HttpCallStatus               *int32             `json:"httpCallStatus,omitempty"`
	HttpCallCorrelationAttempted *bool              `json:"httpCallCorrelationAttempted,omitempty"`
	HttpCallAsynchronous         *bool              `json:"httpCallAsynchronous,omitempty"`
	Initiator                    *string            `json:"initiator,omitempty"`
	ResourceType                 *string            `json:"resourceType,omitempty"`
	CacheInteraction             *string            `json:"cacheInteraction,omitempty"`
	EncodedBodySize              *int64             `json:"encodedBodySize,omitempty"`
	DecodedBodySize              *int64             `json:"decodedBodySize,omitempty"`
	TransferSize                 *int64             `json:"transferSize,omitempty"`
	UnloadTime                   *int64             `json:"unloadTime,omitempty"`
	RedirectTime                 *int64             `json:"redirectTime,omitempty"`
	AppCacheTime                 *int64             `json:"appCacheTime,omitempty"`
	DnsTime                      *int64             `json:"dnsTime,omitempty"`
	TcpTime                      *int64             `json:"tcpTime,omitempty"`
	SslTime                      *int64             `json:"sslTime,omitempty"`
	RequestTime                  *int64             `json:"requestTime,omitempty"`
	ResponseTime                 *int64             `json:"responseTime,omitempty"`
	ProcessingTime               *int64             `json:"processingTime,omitempty"`
	OnLoadTime                   *int64             `json:"onLoadTime,omitempty"`
	BackendTime                  *int64             `json:"backendTime,omitempty"`
	FrontendTime                 *int64             `json:"frontendTime,omitempty"`
	DomTime                      *int64             `json:"domTime,omitempty"`
	ChildrenTime                 *int64             `json:"childrenTime,omitempty"`
	FirstPaintTime               *int64             `json:"firstPaintTime,omitempty"`
	FirstContentfulPaintTime     *int64             `json:"firstContentfulPaintTime,omitempty"`
	LargestContentfulPaintTime   *int64             `json:"largestContentfulPaintTime,omitempty"`
	FirstInputDelayTime          *int64             `json:"firstInputDelayTime,omitempty"`
	CumulativeLayoutShift        *float64           `json:"cumulativeLayoutShift,omitempty"`
	CspBlockedUri                *string            `json:"cspBlockedUri,omitempty"`
	CspEffectiveDirective        *string            `json:"cspEffectiveDirective,omitempty"`
	CspOriginalPolicy            *string            `json:"cspOriginalPolicy,omitempty"`
	CspDisposition               *string            `json:"cspDisposition,omitempty"`
	CspSample                    *string            `json:"cspSample,omitempty"`
	CspSourceFile                *string            `json:"cspSourceFile,omitempty"`
	CspLineNumber                *int64             `json:"cspLineNumber,omitempty"`
	CspColumnNumber              *int64             `json:"cspColumnNumber,omitempty"`
	SnippetVersion               *string            `json:"snippetVersion,omitempty"`
	GraphqlOperationName         *string            `json:"graphqlOperationName,omitempty"`
	GraphqlOperationType         *string            `json:"graphqlOperationType,omitempty"`
}

// NewWebsiteMonitoringBeacon instantiates a new WebsiteMonitoringBeacon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteMonitoringBeacon(websiteId string, websiteLabel string, pageLoadId string, beaconId string, type_ string, locationUrl string, locationOrigin string) *WebsiteMonitoringBeacon {
	this := WebsiteMonitoringBeacon{}
	this.WebsiteId = websiteId
	this.WebsiteLabel = websiteLabel
	this.PageLoadId = pageLoadId
	this.BeaconId = beaconId
	this.Type = type_
	this.LocationUrl = locationUrl
	this.LocationOrigin = locationOrigin
	return &this
}

// NewWebsiteMonitoringBeaconWithDefaults instantiates a new WebsiteMonitoringBeacon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteMonitoringBeaconWithDefaults() *WebsiteMonitoringBeacon {
	this := WebsiteMonitoringBeacon{}
	return &this
}

// GetWebsiteId returns the WebsiteId field value
func (o *WebsiteMonitoringBeacon) GetWebsiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebsiteId
}

// GetWebsiteIdOk returns a tuple with the WebsiteId field value
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetWebsiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebsiteId, true
}

// SetWebsiteId sets field value
func (o *WebsiteMonitoringBeacon) SetWebsiteId(v string) {
	o.WebsiteId = v
}

// GetWebsiteLabel returns the WebsiteLabel field value
func (o *WebsiteMonitoringBeacon) GetWebsiteLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebsiteLabel
}

// GetWebsiteLabelOk returns a tuple with the WebsiteLabel field value
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetWebsiteLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebsiteLabel, true
}

// SetWebsiteLabel sets field value
func (o *WebsiteMonitoringBeacon) SetWebsiteLabel(v string) {
	o.WebsiteLabel = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetPage() string {
	if o == nil || o.Page == nil {
		var ret string
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetPageOk() (*string, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given string and assigns it to the Page field.
func (o *WebsiteMonitoringBeacon) SetPage(v string) {
	o.Page = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetPhase() string {
	if o == nil || o.Phase == nil {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetPhaseOk() (*string, bool) {
	if o == nil || o.Phase == nil {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasPhase() bool {
	if o != nil && o.Phase != nil {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *WebsiteMonitoringBeacon) SetPhase(v string) {
	o.Phase = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *WebsiteMonitoringBeacon) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetClockSkew returns the ClockSkew field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetClockSkew() int64 {
	if o == nil || o.ClockSkew == nil {
		var ret int64
		return ret
	}
	return *o.ClockSkew
}

// GetClockSkewOk returns a tuple with the ClockSkew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetClockSkewOk() (*int64, bool) {
	if o == nil || o.ClockSkew == nil {
		return nil, false
	}
	return o.ClockSkew, true
}

// HasClockSkew returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasClockSkew() bool {
	if o != nil && o.ClockSkew != nil {
		return true
	}

	return false
}

// SetClockSkew gets a reference to the given int64 and assigns it to the ClockSkew field.
func (o *WebsiteMonitoringBeacon) SetClockSkew(v int64) {
	o.ClockSkew = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *WebsiteMonitoringBeacon) SetDuration(v int64) {
	o.Duration = &v
}

// GetBatchSize returns the BatchSize field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetBatchSize() int64 {
	if o == nil || o.BatchSize == nil {
		var ret int64
		return ret
	}
	return *o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetBatchSizeOk() (*int64, bool) {
	if o == nil || o.BatchSize == nil {
		return nil, false
	}
	return o.BatchSize, true
}

// HasBatchSize returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasBatchSize() bool {
	if o != nil && o.BatchSize != nil {
		return true
	}

	return false
}

// SetBatchSize gets a reference to the given int64 and assigns it to the BatchSize field.
func (o *WebsiteMonitoringBeacon) SetBatchSize(v int64) {
	o.BatchSize = &v
}

// GetAccurateTimingsAvailable returns the AccurateTimingsAvailable field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetAccurateTimingsAvailable() bool {
	if o == nil || o.AccurateTimingsAvailable == nil {
		var ret bool
		return ret
	}
	return *o.AccurateTimingsAvailable
}

// GetAccurateTimingsAvailableOk returns a tuple with the AccurateTimingsAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetAccurateTimingsAvailableOk() (*bool, bool) {
	if o == nil || o.AccurateTimingsAvailable == nil {
		return nil, false
	}
	return o.AccurateTimingsAvailable, true
}

// HasAccurateTimingsAvailable returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasAccurateTimingsAvailable() bool {
	if o != nil && o.AccurateTimingsAvailable != nil {
		return true
	}

	return false
}

// SetAccurateTimingsAvailable gets a reference to the given bool and assigns it to the AccurateTimingsAvailable field.
func (o *WebsiteMonitoringBeacon) SetAccurateTimingsAvailable(v bool) {
	o.AccurateTimingsAvailable = &v
}

// GetDeprecations returns the Deprecations field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetDeprecations() []string {
	if o == nil || o.Deprecations == nil {
		var ret []string
		return ret
	}
	return *o.Deprecations
}

// GetDeprecationsOk returns a tuple with the Deprecations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetDeprecationsOk() (*[]string, bool) {
	if o == nil || o.Deprecations == nil {
		return nil, false
	}
	return o.Deprecations, true
}

// HasDeprecations returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasDeprecations() bool {
	if o != nil && o.Deprecations != nil {
		return true
	}

	return false
}

// SetDeprecations gets a reference to the given []string and assigns it to the Deprecations field.
func (o *WebsiteMonitoringBeacon) SetDeprecations(v []string) {
	o.Deprecations = &v
}

// GetPageLoadId returns the PageLoadId field value
func (o *WebsiteMonitoringBeacon) GetPageLoadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PageLoadId
}

// GetPageLoadIdOk returns a tuple with the PageLoadId field value
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetPageLoadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageLoadId, true
}

// SetPageLoadId sets field value
func (o *WebsiteMonitoringBeacon) SetPageLoadId(v string) {
	o.PageLoadId = v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetSessionId() string {
	if o == nil || o.SessionId == nil {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetSessionIdOk() (*string, bool) {
	if o == nil || o.SessionId == nil {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *WebsiteMonitoringBeacon) SetSessionId(v string) {
	o.SessionId = &v
}

// GetBeaconId returns the BeaconId field value
func (o *WebsiteMonitoringBeacon) GetBeaconId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeaconId
}

// GetBeaconIdOk returns a tuple with the BeaconId field value
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetBeaconIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeaconId, true
}

// SetBeaconId sets field value
func (o *WebsiteMonitoringBeacon) SetBeaconId(v string) {
	o.BeaconId = v
}

// GetBackendTraceId returns the BackendTraceId field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetBackendTraceId() string {
	if o == nil || o.BackendTraceId == nil {
		var ret string
		return ret
	}
	return *o.BackendTraceId
}

// GetBackendTraceIdOk returns a tuple with the BackendTraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetBackendTraceIdOk() (*string, bool) {
	if o == nil || o.BackendTraceId == nil {
		return nil, false
	}
	return o.BackendTraceId, true
}

// HasBackendTraceId returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasBackendTraceId() bool {
	if o != nil && o.BackendTraceId != nil {
		return true
	}

	return false
}

// SetBackendTraceId gets a reference to the given string and assigns it to the BackendTraceId field.
func (o *WebsiteMonitoringBeacon) SetBackendTraceId(v string) {
	o.BackendTraceId = &v
}

// GetType returns the Type field value
func (o *WebsiteMonitoringBeacon) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebsiteMonitoringBeacon) SetType(v string) {
	o.Type = v
}

// GetCustomEventName returns the CustomEventName field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCustomEventName() string {
	if o == nil || o.CustomEventName == nil {
		var ret string
		return ret
	}
	return *o.CustomEventName
}

// GetCustomEventNameOk returns a tuple with the CustomEventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCustomEventNameOk() (*string, bool) {
	if o == nil || o.CustomEventName == nil {
		return nil, false
	}
	return o.CustomEventName, true
}

// HasCustomEventName returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCustomEventName() bool {
	if o != nil && o.CustomEventName != nil {
		return true
	}

	return false
}

// SetCustomEventName gets a reference to the given string and assigns it to the CustomEventName field.
func (o *WebsiteMonitoringBeacon) SetCustomEventName(v string) {
	o.CustomEventName = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetMeta() map[string]string {
	if o == nil || o.Meta == nil {
		var ret map[string]string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetMetaOk() (*map[string]string, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]string and assigns it to the Meta field.
func (o *WebsiteMonitoringBeacon) SetMeta(v map[string]string) {
	o.Meta = &v
}

// GetLocationUrl returns the LocationUrl field value
func (o *WebsiteMonitoringBeacon) GetLocationUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationUrl
}

// GetLocationUrlOk returns a tuple with the LocationUrl field value
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetLocationUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationUrl, true
}

// SetLocationUrl sets field value
func (o *WebsiteMonitoringBeacon) SetLocationUrl(v string) {
	o.LocationUrl = v
}

// GetLocationOrigin returns the LocationOrigin field value
func (o *WebsiteMonitoringBeacon) GetLocationOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationOrigin
}

// GetLocationOriginOk returns a tuple with the LocationOrigin field value
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetLocationOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationOrigin, true
}

// SetLocationOrigin sets field value
func (o *WebsiteMonitoringBeacon) SetLocationOrigin(v string) {
	o.LocationOrigin = v
}

// GetLocationPath returns the LocationPath field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetLocationPath() string {
	if o == nil || o.LocationPath == nil {
		var ret string
		return ret
	}
	return *o.LocationPath
}

// GetLocationPathOk returns a tuple with the LocationPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetLocationPathOk() (*string, bool) {
	if o == nil || o.LocationPath == nil {
		return nil, false
	}
	return o.LocationPath, true
}

// HasLocationPath returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasLocationPath() bool {
	if o != nil && o.LocationPath != nil {
		return true
	}

	return false
}

// SetLocationPath gets a reference to the given string and assigns it to the LocationPath field.
func (o *WebsiteMonitoringBeacon) SetLocationPath(v string) {
	o.LocationPath = &v
}

// GetErrorCount returns the ErrorCount field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetErrorCount() int64 {
	if o == nil || o.ErrorCount == nil {
		var ret int64
		return ret
	}
	return *o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetErrorCountOk() (*int64, bool) {
	if o == nil || o.ErrorCount == nil {
		return nil, false
	}
	return o.ErrorCount, true
}

// HasErrorCount returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasErrorCount() bool {
	if o != nil && o.ErrorCount != nil {
		return true
	}

	return false
}

// SetErrorCount gets a reference to the given int64 and assigns it to the ErrorCount field.
func (o *WebsiteMonitoringBeacon) SetErrorCount(v int64) {
	o.ErrorCount = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *WebsiteMonitoringBeacon) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetErrorId() string {
	if o == nil || o.ErrorId == nil {
		var ret string
		return ret
	}
	return *o.ErrorId
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetErrorIdOk() (*string, bool) {
	if o == nil || o.ErrorId == nil {
		return nil, false
	}
	return o.ErrorId, true
}

// HasErrorId returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasErrorId() bool {
	if o != nil && o.ErrorId != nil {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given string and assigns it to the ErrorId field.
func (o *WebsiteMonitoringBeacon) SetErrorId(v string) {
	o.ErrorId = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetErrorType() string {
	if o == nil || o.ErrorType == nil {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetErrorTypeOk() (*string, bool) {
	if o == nil || o.ErrorType == nil {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasErrorType() bool {
	if o != nil && o.ErrorType != nil {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *WebsiteMonitoringBeacon) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetStackTrace() string {
	if o == nil || o.StackTrace == nil {
		var ret string
		return ret
	}
	return *o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetStackTraceOk() (*string, bool) {
	if o == nil || o.StackTrace == nil {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasStackTrace() bool {
	if o != nil && o.StackTrace != nil {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given string and assigns it to the StackTrace field.
func (o *WebsiteMonitoringBeacon) SetStackTrace(v string) {
	o.StackTrace = &v
}

// GetStackTraceParsingStatus returns the StackTraceParsingStatus field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetStackTraceParsingStatus() int32 {
	if o == nil || o.StackTraceParsingStatus == nil {
		var ret int32
		return ret
	}
	return *o.StackTraceParsingStatus
}

// GetStackTraceParsingStatusOk returns a tuple with the StackTraceParsingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetStackTraceParsingStatusOk() (*int32, bool) {
	if o == nil || o.StackTraceParsingStatus == nil {
		return nil, false
	}
	return o.StackTraceParsingStatus, true
}

// HasStackTraceParsingStatus returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasStackTraceParsingStatus() bool {
	if o != nil && o.StackTraceParsingStatus != nil {
		return true
	}

	return false
}

// SetStackTraceParsingStatus gets a reference to the given int32 and assigns it to the StackTraceParsingStatus field.
func (o *WebsiteMonitoringBeacon) SetStackTraceParsingStatus(v int32) {
	o.StackTraceParsingStatus = &v
}

// GetParsedStackTrace returns the ParsedStackTrace field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetParsedStackTrace() []StackTraceLine {
	if o == nil || o.ParsedStackTrace == nil {
		var ret []StackTraceLine
		return ret
	}
	return *o.ParsedStackTrace
}

// GetParsedStackTraceOk returns a tuple with the ParsedStackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetParsedStackTraceOk() (*[]StackTraceLine, bool) {
	if o == nil || o.ParsedStackTrace == nil {
		return nil, false
	}
	return o.ParsedStackTrace, true
}

// HasParsedStackTrace returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasParsedStackTrace() bool {
	if o != nil && o.ParsedStackTrace != nil {
		return true
	}

	return false
}

// SetParsedStackTrace gets a reference to the given []StackTraceLine and assigns it to the ParsedStackTrace field.
func (o *WebsiteMonitoringBeacon) SetParsedStackTrace(v []StackTraceLine) {
	o.ParsedStackTrace = &v
}

// GetStackTraceReadability returns the StackTraceReadability field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetStackTraceReadability() int32 {
	if o == nil || o.StackTraceReadability == nil {
		var ret int32
		return ret
	}
	return *o.StackTraceReadability
}

// GetStackTraceReadabilityOk returns a tuple with the StackTraceReadability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetStackTraceReadabilityOk() (*int32, bool) {
	if o == nil || o.StackTraceReadability == nil {
		return nil, false
	}
	return o.StackTraceReadability, true
}

// HasStackTraceReadability returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasStackTraceReadability() bool {
	if o != nil && o.StackTraceReadability != nil {
		return true
	}

	return false
}

// SetStackTraceReadability gets a reference to the given int32 and assigns it to the StackTraceReadability field.
func (o *WebsiteMonitoringBeacon) SetStackTraceReadability(v int32) {
	o.StackTraceReadability = &v
}

// GetComponentStack returns the ComponentStack field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetComponentStack() string {
	if o == nil || o.ComponentStack == nil {
		var ret string
		return ret
	}
	return *o.ComponentStack
}

// GetComponentStackOk returns a tuple with the ComponentStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetComponentStackOk() (*string, bool) {
	if o == nil || o.ComponentStack == nil {
		return nil, false
	}
	return o.ComponentStack, true
}

// HasComponentStack returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasComponentStack() bool {
	if o != nil && o.ComponentStack != nil {
		return true
	}

	return false
}

// SetComponentStack gets a reference to the given string and assigns it to the ComponentStack field.
func (o *WebsiteMonitoringBeacon) SetComponentStack(v string) {
	o.ComponentStack = &v
}

// GetUserIp returns the UserIp field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetUserIp() string {
	if o == nil || o.UserIp == nil {
		var ret string
		return ret
	}
	return *o.UserIp
}

// GetUserIpOk returns a tuple with the UserIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetUserIpOk() (*string, bool) {
	if o == nil || o.UserIp == nil {
		return nil, false
	}
	return o.UserIp, true
}

// HasUserIp returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasUserIp() bool {
	if o != nil && o.UserIp != nil {
		return true
	}

	return false
}

// SetUserIp gets a reference to the given string and assigns it to the UserIp field.
func (o *WebsiteMonitoringBeacon) SetUserIp(v string) {
	o.UserIp = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *WebsiteMonitoringBeacon) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *WebsiteMonitoringBeacon) SetUserName(v string) {
	o.UserName = &v
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetUserEmail() string {
	if o == nil || o.UserEmail == nil {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetUserEmailOk() (*string, bool) {
	if o == nil || o.UserEmail == nil {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasUserEmail() bool {
	if o != nil && o.UserEmail != nil {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *WebsiteMonitoringBeacon) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetUserLanguages returns the UserLanguages field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetUserLanguages() []string {
	if o == nil || o.UserLanguages == nil {
		var ret []string
		return ret
	}
	return *o.UserLanguages
}

// GetUserLanguagesOk returns a tuple with the UserLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetUserLanguagesOk() (*[]string, bool) {
	if o == nil || o.UserLanguages == nil {
		return nil, false
	}
	return o.UserLanguages, true
}

// HasUserLanguages returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasUserLanguages() bool {
	if o != nil && o.UserLanguages != nil {
		return true
	}

	return false
}

// SetUserLanguages gets a reference to the given []string and assigns it to the UserLanguages field.
func (o *WebsiteMonitoringBeacon) SetUserLanguages(v []string) {
	o.UserLanguages = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetDeviceType() string {
	if o == nil || o.DeviceType == nil {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetDeviceTypeOk() (*string, bool) {
	if o == nil || o.DeviceType == nil {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasDeviceType() bool {
	if o != nil && o.DeviceType != nil {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *WebsiteMonitoringBeacon) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetConnectionType() string {
	if o == nil || o.ConnectionType == nil {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetConnectionTypeOk() (*string, bool) {
	if o == nil || o.ConnectionType == nil {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasConnectionType() bool {
	if o != nil && o.ConnectionType != nil {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *WebsiteMonitoringBeacon) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetBrowserName returns the BrowserName field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetBrowserName() string {
	if o == nil || o.BrowserName == nil {
		var ret string
		return ret
	}
	return *o.BrowserName
}

// GetBrowserNameOk returns a tuple with the BrowserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetBrowserNameOk() (*string, bool) {
	if o == nil || o.BrowserName == nil {
		return nil, false
	}
	return o.BrowserName, true
}

// HasBrowserName returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasBrowserName() bool {
	if o != nil && o.BrowserName != nil {
		return true
	}

	return false
}

// SetBrowserName gets a reference to the given string and assigns it to the BrowserName field.
func (o *WebsiteMonitoringBeacon) SetBrowserName(v string) {
	o.BrowserName = &v
}

// GetBrowserVersion returns the BrowserVersion field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetBrowserVersion() string {
	if o == nil || o.BrowserVersion == nil {
		var ret string
		return ret
	}
	return *o.BrowserVersion
}

// GetBrowserVersionOk returns a tuple with the BrowserVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetBrowserVersionOk() (*string, bool) {
	if o == nil || o.BrowserVersion == nil {
		return nil, false
	}
	return o.BrowserVersion, true
}

// HasBrowserVersion returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasBrowserVersion() bool {
	if o != nil && o.BrowserVersion != nil {
		return true
	}

	return false
}

// SetBrowserVersion gets a reference to the given string and assigns it to the BrowserVersion field.
func (o *WebsiteMonitoringBeacon) SetBrowserVersion(v string) {
	o.BrowserVersion = &v
}

// GetOsName returns the OsName field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetOsName() string {
	if o == nil || o.OsName == nil {
		var ret string
		return ret
	}
	return *o.OsName
}

// GetOsNameOk returns a tuple with the OsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetOsNameOk() (*string, bool) {
	if o == nil || o.OsName == nil {
		return nil, false
	}
	return o.OsName, true
}

// HasOsName returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasOsName() bool {
	if o != nil && o.OsName != nil {
		return true
	}

	return false
}

// SetOsName gets a reference to the given string and assigns it to the OsName field.
func (o *WebsiteMonitoringBeacon) SetOsName(v string) {
	o.OsName = &v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetOsVersion() string {
	if o == nil || o.OsVersion == nil {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetOsVersionOk() (*string, bool) {
	if o == nil || o.OsVersion == nil {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasOsVersion() bool {
	if o != nil && o.OsVersion != nil {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *WebsiteMonitoringBeacon) SetOsVersion(v string) {
	o.OsVersion = &v
}

// GetWindowHidden returns the WindowHidden field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetWindowHidden() bool {
	if o == nil || o.WindowHidden == nil {
		var ret bool
		return ret
	}
	return *o.WindowHidden
}

// GetWindowHiddenOk returns a tuple with the WindowHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetWindowHiddenOk() (*bool, bool) {
	if o == nil || o.WindowHidden == nil {
		return nil, false
	}
	return o.WindowHidden, true
}

// HasWindowHidden returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasWindowHidden() bool {
	if o != nil && o.WindowHidden != nil {
		return true
	}

	return false
}

// SetWindowHidden gets a reference to the given bool and assigns it to the WindowHidden field.
func (o *WebsiteMonitoringBeacon) SetWindowHidden(v bool) {
	o.WindowHidden = &v
}

// GetWindowWidth returns the WindowWidth field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetWindowWidth() int32 {
	if o == nil || o.WindowWidth == nil {
		var ret int32
		return ret
	}
	return *o.WindowWidth
}

// GetWindowWidthOk returns a tuple with the WindowWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetWindowWidthOk() (*int32, bool) {
	if o == nil || o.WindowWidth == nil {
		return nil, false
	}
	return o.WindowWidth, true
}

// HasWindowWidth returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasWindowWidth() bool {
	if o != nil && o.WindowWidth != nil {
		return true
	}

	return false
}

// SetWindowWidth gets a reference to the given int32 and assigns it to the WindowWidth field.
func (o *WebsiteMonitoringBeacon) SetWindowWidth(v int32) {
	o.WindowWidth = &v
}

// GetWindowHeight returns the WindowHeight field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetWindowHeight() int32 {
	if o == nil || o.WindowHeight == nil {
		var ret int32
		return ret
	}
	return *o.WindowHeight
}

// GetWindowHeightOk returns a tuple with the WindowHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetWindowHeightOk() (*int32, bool) {
	if o == nil || o.WindowHeight == nil {
		return nil, false
	}
	return o.WindowHeight, true
}

// HasWindowHeight returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasWindowHeight() bool {
	if o != nil && o.WindowHeight != nil {
		return true
	}

	return false
}

// SetWindowHeight gets a reference to the given int32 and assigns it to the WindowHeight field.
func (o *WebsiteMonitoringBeacon) SetWindowHeight(v int32) {
	o.WindowHeight = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetLatitude() float64 {
	if o == nil || o.Latitude == nil {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetLatitudeOk() (*float64, bool) {
	if o == nil || o.Latitude == nil {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasLatitude() bool {
	if o != nil && o.Latitude != nil {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *WebsiteMonitoringBeacon) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetLongitude() float64 {
	if o == nil || o.Longitude == nil {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetLongitudeOk() (*float64, bool) {
	if o == nil || o.Longitude == nil {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasLongitude() bool {
	if o != nil && o.Longitude != nil {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *WebsiteMonitoringBeacon) SetLongitude(v float64) {
	o.Longitude = &v
}

// GetAccuracyRadius returns the AccuracyRadius field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetAccuracyRadius() int64 {
	if o == nil || o.AccuracyRadius == nil {
		var ret int64
		return ret
	}
	return *o.AccuracyRadius
}

// GetAccuracyRadiusOk returns a tuple with the AccuracyRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetAccuracyRadiusOk() (*int64, bool) {
	if o == nil || o.AccuracyRadius == nil {
		return nil, false
	}
	return o.AccuracyRadius, true
}

// HasAccuracyRadius returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasAccuracyRadius() bool {
	if o != nil && o.AccuracyRadius != nil {
		return true
	}

	return false
}

// SetAccuracyRadius gets a reference to the given int64 and assigns it to the AccuracyRadius field.
func (o *WebsiteMonitoringBeacon) SetAccuracyRadius(v int64) {
	o.AccuracyRadius = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *WebsiteMonitoringBeacon) SetCity(v string) {
	o.City = &v
}

// GetSubdivision returns the Subdivision field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetSubdivision() string {
	if o == nil || o.Subdivision == nil {
		var ret string
		return ret
	}
	return *o.Subdivision
}

// GetSubdivisionOk returns a tuple with the Subdivision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetSubdivisionOk() (*string, bool) {
	if o == nil || o.Subdivision == nil {
		return nil, false
	}
	return o.Subdivision, true
}

// HasSubdivision returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasSubdivision() bool {
	if o != nil && o.Subdivision != nil {
		return true
	}

	return false
}

// SetSubdivision gets a reference to the given string and assigns it to the Subdivision field.
func (o *WebsiteMonitoringBeacon) SetSubdivision(v string) {
	o.Subdivision = &v
}

// GetSubdivisionCode returns the SubdivisionCode field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetSubdivisionCode() string {
	if o == nil || o.SubdivisionCode == nil {
		var ret string
		return ret
	}
	return *o.SubdivisionCode
}

// GetSubdivisionCodeOk returns a tuple with the SubdivisionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetSubdivisionCodeOk() (*string, bool) {
	if o == nil || o.SubdivisionCode == nil {
		return nil, false
	}
	return o.SubdivisionCode, true
}

// HasSubdivisionCode returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasSubdivisionCode() bool {
	if o != nil && o.SubdivisionCode != nil {
		return true
	}

	return false
}

// SetSubdivisionCode gets a reference to the given string and assigns it to the SubdivisionCode field.
func (o *WebsiteMonitoringBeacon) SetSubdivisionCode(v string) {
	o.SubdivisionCode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *WebsiteMonitoringBeacon) SetCountry(v string) {
	o.Country = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *WebsiteMonitoringBeacon) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetContinent returns the Continent field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetContinent() string {
	if o == nil || o.Continent == nil {
		var ret string
		return ret
	}
	return *o.Continent
}

// GetContinentOk returns a tuple with the Continent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetContinentOk() (*string, bool) {
	if o == nil || o.Continent == nil {
		return nil, false
	}
	return o.Continent, true
}

// HasContinent returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasContinent() bool {
	if o != nil && o.Continent != nil {
		return true
	}

	return false
}

// SetContinent gets a reference to the given string and assigns it to the Continent field.
func (o *WebsiteMonitoringBeacon) SetContinent(v string) {
	o.Continent = &v
}

// GetContinentCode returns the ContinentCode field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetContinentCode() string {
	if o == nil || o.ContinentCode == nil {
		var ret string
		return ret
	}
	return *o.ContinentCode
}

// GetContinentCodeOk returns a tuple with the ContinentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetContinentCodeOk() (*string, bool) {
	if o == nil || o.ContinentCode == nil {
		return nil, false
	}
	return o.ContinentCode, true
}

// HasContinentCode returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasContinentCode() bool {
	if o != nil && o.ContinentCode != nil {
		return true
	}

	return false
}

// SetContinentCode gets a reference to the given string and assigns it to the ContinentCode field.
func (o *WebsiteMonitoringBeacon) SetContinentCode(v string) {
	o.ContinentCode = &v
}

// GetHttpCallUrl returns the HttpCallUrl field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetHttpCallUrl() string {
	if o == nil || o.HttpCallUrl == nil {
		var ret string
		return ret
	}
	return *o.HttpCallUrl
}

// GetHttpCallUrlOk returns a tuple with the HttpCallUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetHttpCallUrlOk() (*string, bool) {
	if o == nil || o.HttpCallUrl == nil {
		return nil, false
	}
	return o.HttpCallUrl, true
}

// HasHttpCallUrl returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasHttpCallUrl() bool {
	if o != nil && o.HttpCallUrl != nil {
		return true
	}

	return false
}

// SetHttpCallUrl gets a reference to the given string and assigns it to the HttpCallUrl field.
func (o *WebsiteMonitoringBeacon) SetHttpCallUrl(v string) {
	o.HttpCallUrl = &v
}

// GetHttpCallOrigin returns the HttpCallOrigin field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetHttpCallOrigin() string {
	if o == nil || o.HttpCallOrigin == nil {
		var ret string
		return ret
	}
	return *o.HttpCallOrigin
}

// GetHttpCallOriginOk returns a tuple with the HttpCallOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetHttpCallOriginOk() (*string, bool) {
	if o == nil || o.HttpCallOrigin == nil {
		return nil, false
	}
	return o.HttpCallOrigin, true
}

// HasHttpCallOrigin returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasHttpCallOrigin() bool {
	if o != nil && o.HttpCallOrigin != nil {
		return true
	}

	return false
}

// SetHttpCallOrigin gets a reference to the given string and assigns it to the HttpCallOrigin field.
func (o *WebsiteMonitoringBeacon) SetHttpCallOrigin(v string) {
	o.HttpCallOrigin = &v
}

// GetHttpCallPath returns the HttpCallPath field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetHttpCallPath() string {
	if o == nil || o.HttpCallPath == nil {
		var ret string
		return ret
	}
	return *o.HttpCallPath
}

// GetHttpCallPathOk returns a tuple with the HttpCallPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetHttpCallPathOk() (*string, bool) {
	if o == nil || o.HttpCallPath == nil {
		return nil, false
	}
	return o.HttpCallPath, true
}

// HasHttpCallPath returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasHttpCallPath() bool {
	if o != nil && o.HttpCallPath != nil {
		return true
	}

	return false
}

// SetHttpCallPath gets a reference to the given string and assigns it to the HttpCallPath field.
func (o *WebsiteMonitoringBeacon) SetHttpCallPath(v string) {
	o.HttpCallPath = &v
}

// GetHttpCallMethod returns the HttpCallMethod field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetHttpCallMethod() string {
	if o == nil || o.HttpCallMethod == nil {
		var ret string
		return ret
	}
	return *o.HttpCallMethod
}

// GetHttpCallMethodOk returns a tuple with the HttpCallMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetHttpCallMethodOk() (*string, bool) {
	if o == nil || o.HttpCallMethod == nil {
		return nil, false
	}
	return o.HttpCallMethod, true
}

// HasHttpCallMethod returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasHttpCallMethod() bool {
	if o != nil && o.HttpCallMethod != nil {
		return true
	}

	return false
}

// SetHttpCallMethod gets a reference to the given string and assigns it to the HttpCallMethod field.
func (o *WebsiteMonitoringBeacon) SetHttpCallMethod(v string) {
	o.HttpCallMethod = &v
}

// GetHttpCallStatus returns the HttpCallStatus field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetHttpCallStatus() int32 {
	if o == nil || o.HttpCallStatus == nil {
		var ret int32
		return ret
	}
	return *o.HttpCallStatus
}

// GetHttpCallStatusOk returns a tuple with the HttpCallStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetHttpCallStatusOk() (*int32, bool) {
	if o == nil || o.HttpCallStatus == nil {
		return nil, false
	}
	return o.HttpCallStatus, true
}

// HasHttpCallStatus returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasHttpCallStatus() bool {
	if o != nil && o.HttpCallStatus != nil {
		return true
	}

	return false
}

// SetHttpCallStatus gets a reference to the given int32 and assigns it to the HttpCallStatus field.
func (o *WebsiteMonitoringBeacon) SetHttpCallStatus(v int32) {
	o.HttpCallStatus = &v
}

// GetHttpCallCorrelationAttempted returns the HttpCallCorrelationAttempted field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetHttpCallCorrelationAttempted() bool {
	if o == nil || o.HttpCallCorrelationAttempted == nil {
		var ret bool
		return ret
	}
	return *o.HttpCallCorrelationAttempted
}

// GetHttpCallCorrelationAttemptedOk returns a tuple with the HttpCallCorrelationAttempted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetHttpCallCorrelationAttemptedOk() (*bool, bool) {
	if o == nil || o.HttpCallCorrelationAttempted == nil {
		return nil, false
	}
	return o.HttpCallCorrelationAttempted, true
}

// HasHttpCallCorrelationAttempted returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasHttpCallCorrelationAttempted() bool {
	if o != nil && o.HttpCallCorrelationAttempted != nil {
		return true
	}

	return false
}

// SetHttpCallCorrelationAttempted gets a reference to the given bool and assigns it to the HttpCallCorrelationAttempted field.
func (o *WebsiteMonitoringBeacon) SetHttpCallCorrelationAttempted(v bool) {
	o.HttpCallCorrelationAttempted = &v
}

// GetHttpCallAsynchronous returns the HttpCallAsynchronous field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetHttpCallAsynchronous() bool {
	if o == nil || o.HttpCallAsynchronous == nil {
		var ret bool
		return ret
	}
	return *o.HttpCallAsynchronous
}

// GetHttpCallAsynchronousOk returns a tuple with the HttpCallAsynchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetHttpCallAsynchronousOk() (*bool, bool) {
	if o == nil || o.HttpCallAsynchronous == nil {
		return nil, false
	}
	return o.HttpCallAsynchronous, true
}

// HasHttpCallAsynchronous returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasHttpCallAsynchronous() bool {
	if o != nil && o.HttpCallAsynchronous != nil {
		return true
	}

	return false
}

// SetHttpCallAsynchronous gets a reference to the given bool and assigns it to the HttpCallAsynchronous field.
func (o *WebsiteMonitoringBeacon) SetHttpCallAsynchronous(v bool) {
	o.HttpCallAsynchronous = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetInitiator() string {
	if o == nil || o.Initiator == nil {
		var ret string
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetInitiatorOk() (*string, bool) {
	if o == nil || o.Initiator == nil {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasInitiator() bool {
	if o != nil && o.Initiator != nil {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given string and assigns it to the Initiator field.
func (o *WebsiteMonitoringBeacon) SetInitiator(v string) {
	o.Initiator = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *WebsiteMonitoringBeacon) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetCacheInteraction returns the CacheInteraction field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCacheInteraction() string {
	if o == nil || o.CacheInteraction == nil {
		var ret string
		return ret
	}
	return *o.CacheInteraction
}

// GetCacheInteractionOk returns a tuple with the CacheInteraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCacheInteractionOk() (*string, bool) {
	if o == nil || o.CacheInteraction == nil {
		return nil, false
	}
	return o.CacheInteraction, true
}

// HasCacheInteraction returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCacheInteraction() bool {
	if o != nil && o.CacheInteraction != nil {
		return true
	}

	return false
}

// SetCacheInteraction gets a reference to the given string and assigns it to the CacheInteraction field.
func (o *WebsiteMonitoringBeacon) SetCacheInteraction(v string) {
	o.CacheInteraction = &v
}

// GetEncodedBodySize returns the EncodedBodySize field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetEncodedBodySize() int64 {
	if o == nil || o.EncodedBodySize == nil {
		var ret int64
		return ret
	}
	return *o.EncodedBodySize
}

// GetEncodedBodySizeOk returns a tuple with the EncodedBodySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetEncodedBodySizeOk() (*int64, bool) {
	if o == nil || o.EncodedBodySize == nil {
		return nil, false
	}
	return o.EncodedBodySize, true
}

// HasEncodedBodySize returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasEncodedBodySize() bool {
	if o != nil && o.EncodedBodySize != nil {
		return true
	}

	return false
}

// SetEncodedBodySize gets a reference to the given int64 and assigns it to the EncodedBodySize field.
func (o *WebsiteMonitoringBeacon) SetEncodedBodySize(v int64) {
	o.EncodedBodySize = &v
}

// GetDecodedBodySize returns the DecodedBodySize field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetDecodedBodySize() int64 {
	if o == nil || o.DecodedBodySize == nil {
		var ret int64
		return ret
	}
	return *o.DecodedBodySize
}

// GetDecodedBodySizeOk returns a tuple with the DecodedBodySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetDecodedBodySizeOk() (*int64, bool) {
	if o == nil || o.DecodedBodySize == nil {
		return nil, false
	}
	return o.DecodedBodySize, true
}

// HasDecodedBodySize returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasDecodedBodySize() bool {
	if o != nil && o.DecodedBodySize != nil {
		return true
	}

	return false
}

// SetDecodedBodySize gets a reference to the given int64 and assigns it to the DecodedBodySize field.
func (o *WebsiteMonitoringBeacon) SetDecodedBodySize(v int64) {
	o.DecodedBodySize = &v
}

// GetTransferSize returns the TransferSize field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetTransferSize() int64 {
	if o == nil || o.TransferSize == nil {
		var ret int64
		return ret
	}
	return *o.TransferSize
}

// GetTransferSizeOk returns a tuple with the TransferSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetTransferSizeOk() (*int64, bool) {
	if o == nil || o.TransferSize == nil {
		return nil, false
	}
	return o.TransferSize, true
}

// HasTransferSize returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasTransferSize() bool {
	if o != nil && o.TransferSize != nil {
		return true
	}

	return false
}

// SetTransferSize gets a reference to the given int64 and assigns it to the TransferSize field.
func (o *WebsiteMonitoringBeacon) SetTransferSize(v int64) {
	o.TransferSize = &v
}

// GetUnloadTime returns the UnloadTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetUnloadTime() int64 {
	if o == nil || o.UnloadTime == nil {
		var ret int64
		return ret
	}
	return *o.UnloadTime
}

// GetUnloadTimeOk returns a tuple with the UnloadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetUnloadTimeOk() (*int64, bool) {
	if o == nil || o.UnloadTime == nil {
		return nil, false
	}
	return o.UnloadTime, true
}

// HasUnloadTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasUnloadTime() bool {
	if o != nil && o.UnloadTime != nil {
		return true
	}

	return false
}

// SetUnloadTime gets a reference to the given int64 and assigns it to the UnloadTime field.
func (o *WebsiteMonitoringBeacon) SetUnloadTime(v int64) {
	o.UnloadTime = &v
}

// GetRedirectTime returns the RedirectTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetRedirectTime() int64 {
	if o == nil || o.RedirectTime == nil {
		var ret int64
		return ret
	}
	return *o.RedirectTime
}

// GetRedirectTimeOk returns a tuple with the RedirectTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetRedirectTimeOk() (*int64, bool) {
	if o == nil || o.RedirectTime == nil {
		return nil, false
	}
	return o.RedirectTime, true
}

// HasRedirectTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasRedirectTime() bool {
	if o != nil && o.RedirectTime != nil {
		return true
	}

	return false
}

// SetRedirectTime gets a reference to the given int64 and assigns it to the RedirectTime field.
func (o *WebsiteMonitoringBeacon) SetRedirectTime(v int64) {
	o.RedirectTime = &v
}

// GetAppCacheTime returns the AppCacheTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetAppCacheTime() int64 {
	if o == nil || o.AppCacheTime == nil {
		var ret int64
		return ret
	}
	return *o.AppCacheTime
}

// GetAppCacheTimeOk returns a tuple with the AppCacheTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetAppCacheTimeOk() (*int64, bool) {
	if o == nil || o.AppCacheTime == nil {
		return nil, false
	}
	return o.AppCacheTime, true
}

// HasAppCacheTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasAppCacheTime() bool {
	if o != nil && o.AppCacheTime != nil {
		return true
	}

	return false
}

// SetAppCacheTime gets a reference to the given int64 and assigns it to the AppCacheTime field.
func (o *WebsiteMonitoringBeacon) SetAppCacheTime(v int64) {
	o.AppCacheTime = &v
}

// GetDnsTime returns the DnsTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetDnsTime() int64 {
	if o == nil || o.DnsTime == nil {
		var ret int64
		return ret
	}
	return *o.DnsTime
}

// GetDnsTimeOk returns a tuple with the DnsTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetDnsTimeOk() (*int64, bool) {
	if o == nil || o.DnsTime == nil {
		return nil, false
	}
	return o.DnsTime, true
}

// HasDnsTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasDnsTime() bool {
	if o != nil && o.DnsTime != nil {
		return true
	}

	return false
}

// SetDnsTime gets a reference to the given int64 and assigns it to the DnsTime field.
func (o *WebsiteMonitoringBeacon) SetDnsTime(v int64) {
	o.DnsTime = &v
}

// GetTcpTime returns the TcpTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetTcpTime() int64 {
	if o == nil || o.TcpTime == nil {
		var ret int64
		return ret
	}
	return *o.TcpTime
}

// GetTcpTimeOk returns a tuple with the TcpTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetTcpTimeOk() (*int64, bool) {
	if o == nil || o.TcpTime == nil {
		return nil, false
	}
	return o.TcpTime, true
}

// HasTcpTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasTcpTime() bool {
	if o != nil && o.TcpTime != nil {
		return true
	}

	return false
}

// SetTcpTime gets a reference to the given int64 and assigns it to the TcpTime field.
func (o *WebsiteMonitoringBeacon) SetTcpTime(v int64) {
	o.TcpTime = &v
}

// GetSslTime returns the SslTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetSslTime() int64 {
	if o == nil || o.SslTime == nil {
		var ret int64
		return ret
	}
	return *o.SslTime
}

// GetSslTimeOk returns a tuple with the SslTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetSslTimeOk() (*int64, bool) {
	if o == nil || o.SslTime == nil {
		return nil, false
	}
	return o.SslTime, true
}

// HasSslTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasSslTime() bool {
	if o != nil && o.SslTime != nil {
		return true
	}

	return false
}

// SetSslTime gets a reference to the given int64 and assigns it to the SslTime field.
func (o *WebsiteMonitoringBeacon) SetSslTime(v int64) {
	o.SslTime = &v
}

// GetRequestTime returns the RequestTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetRequestTime() int64 {
	if o == nil || o.RequestTime == nil {
		var ret int64
		return ret
	}
	return *o.RequestTime
}

// GetRequestTimeOk returns a tuple with the RequestTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetRequestTimeOk() (*int64, bool) {
	if o == nil || o.RequestTime == nil {
		return nil, false
	}
	return o.RequestTime, true
}

// HasRequestTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasRequestTime() bool {
	if o != nil && o.RequestTime != nil {
		return true
	}

	return false
}

// SetRequestTime gets a reference to the given int64 and assigns it to the RequestTime field.
func (o *WebsiteMonitoringBeacon) SetRequestTime(v int64) {
	o.RequestTime = &v
}

// GetResponseTime returns the ResponseTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetResponseTime() int64 {
	if o == nil || o.ResponseTime == nil {
		var ret int64
		return ret
	}
	return *o.ResponseTime
}

// GetResponseTimeOk returns a tuple with the ResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetResponseTimeOk() (*int64, bool) {
	if o == nil || o.ResponseTime == nil {
		return nil, false
	}
	return o.ResponseTime, true
}

// HasResponseTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasResponseTime() bool {
	if o != nil && o.ResponseTime != nil {
		return true
	}

	return false
}

// SetResponseTime gets a reference to the given int64 and assigns it to the ResponseTime field.
func (o *WebsiteMonitoringBeacon) SetResponseTime(v int64) {
	o.ResponseTime = &v
}

// GetProcessingTime returns the ProcessingTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetProcessingTime() int64 {
	if o == nil || o.ProcessingTime == nil {
		var ret int64
		return ret
	}
	return *o.ProcessingTime
}

// GetProcessingTimeOk returns a tuple with the ProcessingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetProcessingTimeOk() (*int64, bool) {
	if o == nil || o.ProcessingTime == nil {
		return nil, false
	}
	return o.ProcessingTime, true
}

// HasProcessingTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasProcessingTime() bool {
	if o != nil && o.ProcessingTime != nil {
		return true
	}

	return false
}

// SetProcessingTime gets a reference to the given int64 and assigns it to the ProcessingTime field.
func (o *WebsiteMonitoringBeacon) SetProcessingTime(v int64) {
	o.ProcessingTime = &v
}

// GetOnLoadTime returns the OnLoadTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetOnLoadTime() int64 {
	if o == nil || o.OnLoadTime == nil {
		var ret int64
		return ret
	}
	return *o.OnLoadTime
}

// GetOnLoadTimeOk returns a tuple with the OnLoadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetOnLoadTimeOk() (*int64, bool) {
	if o == nil || o.OnLoadTime == nil {
		return nil, false
	}
	return o.OnLoadTime, true
}

// HasOnLoadTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasOnLoadTime() bool {
	if o != nil && o.OnLoadTime != nil {
		return true
	}

	return false
}

// SetOnLoadTime gets a reference to the given int64 and assigns it to the OnLoadTime field.
func (o *WebsiteMonitoringBeacon) SetOnLoadTime(v int64) {
	o.OnLoadTime = &v
}

// GetBackendTime returns the BackendTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetBackendTime() int64 {
	if o == nil || o.BackendTime == nil {
		var ret int64
		return ret
	}
	return *o.BackendTime
}

// GetBackendTimeOk returns a tuple with the BackendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetBackendTimeOk() (*int64, bool) {
	if o == nil || o.BackendTime == nil {
		return nil, false
	}
	return o.BackendTime, true
}

// HasBackendTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasBackendTime() bool {
	if o != nil && o.BackendTime != nil {
		return true
	}

	return false
}

// SetBackendTime gets a reference to the given int64 and assigns it to the BackendTime field.
func (o *WebsiteMonitoringBeacon) SetBackendTime(v int64) {
	o.BackendTime = &v
}

// GetFrontendTime returns the FrontendTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetFrontendTime() int64 {
	if o == nil || o.FrontendTime == nil {
		var ret int64
		return ret
	}
	return *o.FrontendTime
}

// GetFrontendTimeOk returns a tuple with the FrontendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetFrontendTimeOk() (*int64, bool) {
	if o == nil || o.FrontendTime == nil {
		return nil, false
	}
	return o.FrontendTime, true
}

// HasFrontendTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasFrontendTime() bool {
	if o != nil && o.FrontendTime != nil {
		return true
	}

	return false
}

// SetFrontendTime gets a reference to the given int64 and assigns it to the FrontendTime field.
func (o *WebsiteMonitoringBeacon) SetFrontendTime(v int64) {
	o.FrontendTime = &v
}

// GetDomTime returns the DomTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetDomTime() int64 {
	if o == nil || o.DomTime == nil {
		var ret int64
		return ret
	}
	return *o.DomTime
}

// GetDomTimeOk returns a tuple with the DomTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetDomTimeOk() (*int64, bool) {
	if o == nil || o.DomTime == nil {
		return nil, false
	}
	return o.DomTime, true
}

// HasDomTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasDomTime() bool {
	if o != nil && o.DomTime != nil {
		return true
	}

	return false
}

// SetDomTime gets a reference to the given int64 and assigns it to the DomTime field.
func (o *WebsiteMonitoringBeacon) SetDomTime(v int64) {
	o.DomTime = &v
}

// GetChildrenTime returns the ChildrenTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetChildrenTime() int64 {
	if o == nil || o.ChildrenTime == nil {
		var ret int64
		return ret
	}
	return *o.ChildrenTime
}

// GetChildrenTimeOk returns a tuple with the ChildrenTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetChildrenTimeOk() (*int64, bool) {
	if o == nil || o.ChildrenTime == nil {
		return nil, false
	}
	return o.ChildrenTime, true
}

// HasChildrenTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasChildrenTime() bool {
	if o != nil && o.ChildrenTime != nil {
		return true
	}

	return false
}

// SetChildrenTime gets a reference to the given int64 and assigns it to the ChildrenTime field.
func (o *WebsiteMonitoringBeacon) SetChildrenTime(v int64) {
	o.ChildrenTime = &v
}

// GetFirstPaintTime returns the FirstPaintTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetFirstPaintTime() int64 {
	if o == nil || o.FirstPaintTime == nil {
		var ret int64
		return ret
	}
	return *o.FirstPaintTime
}

// GetFirstPaintTimeOk returns a tuple with the FirstPaintTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetFirstPaintTimeOk() (*int64, bool) {
	if o == nil || o.FirstPaintTime == nil {
		return nil, false
	}
	return o.FirstPaintTime, true
}

// HasFirstPaintTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasFirstPaintTime() bool {
	if o != nil && o.FirstPaintTime != nil {
		return true
	}

	return false
}

// SetFirstPaintTime gets a reference to the given int64 and assigns it to the FirstPaintTime field.
func (o *WebsiteMonitoringBeacon) SetFirstPaintTime(v int64) {
	o.FirstPaintTime = &v
}

// GetFirstContentfulPaintTime returns the FirstContentfulPaintTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetFirstContentfulPaintTime() int64 {
	if o == nil || o.FirstContentfulPaintTime == nil {
		var ret int64
		return ret
	}
	return *o.FirstContentfulPaintTime
}

// GetFirstContentfulPaintTimeOk returns a tuple with the FirstContentfulPaintTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetFirstContentfulPaintTimeOk() (*int64, bool) {
	if o == nil || o.FirstContentfulPaintTime == nil {
		return nil, false
	}
	return o.FirstContentfulPaintTime, true
}

// HasFirstContentfulPaintTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasFirstContentfulPaintTime() bool {
	if o != nil && o.FirstContentfulPaintTime != nil {
		return true
	}

	return false
}

// SetFirstContentfulPaintTime gets a reference to the given int64 and assigns it to the FirstContentfulPaintTime field.
func (o *WebsiteMonitoringBeacon) SetFirstContentfulPaintTime(v int64) {
	o.FirstContentfulPaintTime = &v
}

// GetLargestContentfulPaintTime returns the LargestContentfulPaintTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetLargestContentfulPaintTime() int64 {
	if o == nil || o.LargestContentfulPaintTime == nil {
		var ret int64
		return ret
	}
	return *o.LargestContentfulPaintTime
}

// GetLargestContentfulPaintTimeOk returns a tuple with the LargestContentfulPaintTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetLargestContentfulPaintTimeOk() (*int64, bool) {
	if o == nil || o.LargestContentfulPaintTime == nil {
		return nil, false
	}
	return o.LargestContentfulPaintTime, true
}

// HasLargestContentfulPaintTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasLargestContentfulPaintTime() bool {
	if o != nil && o.LargestContentfulPaintTime != nil {
		return true
	}

	return false
}

// SetLargestContentfulPaintTime gets a reference to the given int64 and assigns it to the LargestContentfulPaintTime field.
func (o *WebsiteMonitoringBeacon) SetLargestContentfulPaintTime(v int64) {
	o.LargestContentfulPaintTime = &v
}

// GetFirstInputDelayTime returns the FirstInputDelayTime field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetFirstInputDelayTime() int64 {
	if o == nil || o.FirstInputDelayTime == nil {
		var ret int64
		return ret
	}
	return *o.FirstInputDelayTime
}

// GetFirstInputDelayTimeOk returns a tuple with the FirstInputDelayTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetFirstInputDelayTimeOk() (*int64, bool) {
	if o == nil || o.FirstInputDelayTime == nil {
		return nil, false
	}
	return o.FirstInputDelayTime, true
}

// HasFirstInputDelayTime returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasFirstInputDelayTime() bool {
	if o != nil && o.FirstInputDelayTime != nil {
		return true
	}

	return false
}

// SetFirstInputDelayTime gets a reference to the given int64 and assigns it to the FirstInputDelayTime field.
func (o *WebsiteMonitoringBeacon) SetFirstInputDelayTime(v int64) {
	o.FirstInputDelayTime = &v
}

// GetCumulativeLayoutShift returns the CumulativeLayoutShift field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCumulativeLayoutShift() float64 {
	if o == nil || o.CumulativeLayoutShift == nil {
		var ret float64
		return ret
	}
	return *o.CumulativeLayoutShift
}

// GetCumulativeLayoutShiftOk returns a tuple with the CumulativeLayoutShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCumulativeLayoutShiftOk() (*float64, bool) {
	if o == nil || o.CumulativeLayoutShift == nil {
		return nil, false
	}
	return o.CumulativeLayoutShift, true
}

// HasCumulativeLayoutShift returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCumulativeLayoutShift() bool {
	if o != nil && o.CumulativeLayoutShift != nil {
		return true
	}

	return false
}

// SetCumulativeLayoutShift gets a reference to the given float64 and assigns it to the CumulativeLayoutShift field.
func (o *WebsiteMonitoringBeacon) SetCumulativeLayoutShift(v float64) {
	o.CumulativeLayoutShift = &v
}

// GetCspBlockedUri returns the CspBlockedUri field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspBlockedUri() string {
	if o == nil || o.CspBlockedUri == nil {
		var ret string
		return ret
	}
	return *o.CspBlockedUri
}

// GetCspBlockedUriOk returns a tuple with the CspBlockedUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspBlockedUriOk() (*string, bool) {
	if o == nil || o.CspBlockedUri == nil {
		return nil, false
	}
	return o.CspBlockedUri, true
}

// HasCspBlockedUri returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspBlockedUri() bool {
	if o != nil && o.CspBlockedUri != nil {
		return true
	}

	return false
}

// SetCspBlockedUri gets a reference to the given string and assigns it to the CspBlockedUri field.
func (o *WebsiteMonitoringBeacon) SetCspBlockedUri(v string) {
	o.CspBlockedUri = &v
}

// GetCspEffectiveDirective returns the CspEffectiveDirective field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspEffectiveDirective() string {
	if o == nil || o.CspEffectiveDirective == nil {
		var ret string
		return ret
	}
	return *o.CspEffectiveDirective
}

// GetCspEffectiveDirectiveOk returns a tuple with the CspEffectiveDirective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspEffectiveDirectiveOk() (*string, bool) {
	if o == nil || o.CspEffectiveDirective == nil {
		return nil, false
	}
	return o.CspEffectiveDirective, true
}

// HasCspEffectiveDirective returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspEffectiveDirective() bool {
	if o != nil && o.CspEffectiveDirective != nil {
		return true
	}

	return false
}

// SetCspEffectiveDirective gets a reference to the given string and assigns it to the CspEffectiveDirective field.
func (o *WebsiteMonitoringBeacon) SetCspEffectiveDirective(v string) {
	o.CspEffectiveDirective = &v
}

// GetCspOriginalPolicy returns the CspOriginalPolicy field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspOriginalPolicy() string {
	if o == nil || o.CspOriginalPolicy == nil {
		var ret string
		return ret
	}
	return *o.CspOriginalPolicy
}

// GetCspOriginalPolicyOk returns a tuple with the CspOriginalPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspOriginalPolicyOk() (*string, bool) {
	if o == nil || o.CspOriginalPolicy == nil {
		return nil, false
	}
	return o.CspOriginalPolicy, true
}

// HasCspOriginalPolicy returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspOriginalPolicy() bool {
	if o != nil && o.CspOriginalPolicy != nil {
		return true
	}

	return false
}

// SetCspOriginalPolicy gets a reference to the given string and assigns it to the CspOriginalPolicy field.
func (o *WebsiteMonitoringBeacon) SetCspOriginalPolicy(v string) {
	o.CspOriginalPolicy = &v
}

// GetCspDisposition returns the CspDisposition field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspDisposition() string {
	if o == nil || o.CspDisposition == nil {
		var ret string
		return ret
	}
	return *o.CspDisposition
}

// GetCspDispositionOk returns a tuple with the CspDisposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspDispositionOk() (*string, bool) {
	if o == nil || o.CspDisposition == nil {
		return nil, false
	}
	return o.CspDisposition, true
}

// HasCspDisposition returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspDisposition() bool {
	if o != nil && o.CspDisposition != nil {
		return true
	}

	return false
}

// SetCspDisposition gets a reference to the given string and assigns it to the CspDisposition field.
func (o *WebsiteMonitoringBeacon) SetCspDisposition(v string) {
	o.CspDisposition = &v
}

// GetCspSample returns the CspSample field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspSample() string {
	if o == nil || o.CspSample == nil {
		var ret string
		return ret
	}
	return *o.CspSample
}

// GetCspSampleOk returns a tuple with the CspSample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspSampleOk() (*string, bool) {
	if o == nil || o.CspSample == nil {
		return nil, false
	}
	return o.CspSample, true
}

// HasCspSample returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspSample() bool {
	if o != nil && o.CspSample != nil {
		return true
	}

	return false
}

// SetCspSample gets a reference to the given string and assigns it to the CspSample field.
func (o *WebsiteMonitoringBeacon) SetCspSample(v string) {
	o.CspSample = &v
}

// GetCspSourceFile returns the CspSourceFile field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspSourceFile() string {
	if o == nil || o.CspSourceFile == nil {
		var ret string
		return ret
	}
	return *o.CspSourceFile
}

// GetCspSourceFileOk returns a tuple with the CspSourceFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspSourceFileOk() (*string, bool) {
	if o == nil || o.CspSourceFile == nil {
		return nil, false
	}
	return o.CspSourceFile, true
}

// HasCspSourceFile returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspSourceFile() bool {
	if o != nil && o.CspSourceFile != nil {
		return true
	}

	return false
}

// SetCspSourceFile gets a reference to the given string and assigns it to the CspSourceFile field.
func (o *WebsiteMonitoringBeacon) SetCspSourceFile(v string) {
	o.CspSourceFile = &v
}

// GetCspLineNumber returns the CspLineNumber field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspLineNumber() int64 {
	if o == nil || o.CspLineNumber == nil {
		var ret int64
		return ret
	}
	return *o.CspLineNumber
}

// GetCspLineNumberOk returns a tuple with the CspLineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspLineNumberOk() (*int64, bool) {
	if o == nil || o.CspLineNumber == nil {
		return nil, false
	}
	return o.CspLineNumber, true
}

// HasCspLineNumber returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspLineNumber() bool {
	if o != nil && o.CspLineNumber != nil {
		return true
	}

	return false
}

// SetCspLineNumber gets a reference to the given int64 and assigns it to the CspLineNumber field.
func (o *WebsiteMonitoringBeacon) SetCspLineNumber(v int64) {
	o.CspLineNumber = &v
}

// GetCspColumnNumber returns the CspColumnNumber field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetCspColumnNumber() int64 {
	if o == nil || o.CspColumnNumber == nil {
		var ret int64
		return ret
	}
	return *o.CspColumnNumber
}

// GetCspColumnNumberOk returns a tuple with the CspColumnNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetCspColumnNumberOk() (*int64, bool) {
	if o == nil || o.CspColumnNumber == nil {
		return nil, false
	}
	return o.CspColumnNumber, true
}

// HasCspColumnNumber returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasCspColumnNumber() bool {
	if o != nil && o.CspColumnNumber != nil {
		return true
	}

	return false
}

// SetCspColumnNumber gets a reference to the given int64 and assigns it to the CspColumnNumber field.
func (o *WebsiteMonitoringBeacon) SetCspColumnNumber(v int64) {
	o.CspColumnNumber = &v
}

// GetSnippetVersion returns the SnippetVersion field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetSnippetVersion() string {
	if o == nil || o.SnippetVersion == nil {
		var ret string
		return ret
	}
	return *o.SnippetVersion
}

// GetSnippetVersionOk returns a tuple with the SnippetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetSnippetVersionOk() (*string, bool) {
	if o == nil || o.SnippetVersion == nil {
		return nil, false
	}
	return o.SnippetVersion, true
}

// HasSnippetVersion returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasSnippetVersion() bool {
	if o != nil && o.SnippetVersion != nil {
		return true
	}

	return false
}

// SetSnippetVersion gets a reference to the given string and assigns it to the SnippetVersion field.
func (o *WebsiteMonitoringBeacon) SetSnippetVersion(v string) {
	o.SnippetVersion = &v
}

// GetGraphqlOperationName returns the GraphqlOperationName field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetGraphqlOperationName() string {
	if o == nil || o.GraphqlOperationName == nil {
		var ret string
		return ret
	}
	return *o.GraphqlOperationName
}

// GetGraphqlOperationNameOk returns a tuple with the GraphqlOperationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetGraphqlOperationNameOk() (*string, bool) {
	if o == nil || o.GraphqlOperationName == nil {
		return nil, false
	}
	return o.GraphqlOperationName, true
}

// HasGraphqlOperationName returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasGraphqlOperationName() bool {
	if o != nil && o.GraphqlOperationName != nil {
		return true
	}

	return false
}

// SetGraphqlOperationName gets a reference to the given string and assigns it to the GraphqlOperationName field.
func (o *WebsiteMonitoringBeacon) SetGraphqlOperationName(v string) {
	o.GraphqlOperationName = &v
}

// GetGraphqlOperationType returns the GraphqlOperationType field value if set, zero value otherwise.
func (o *WebsiteMonitoringBeacon) GetGraphqlOperationType() string {
	if o == nil || o.GraphqlOperationType == nil {
		var ret string
		return ret
	}
	return *o.GraphqlOperationType
}

// GetGraphqlOperationTypeOk returns a tuple with the GraphqlOperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebsiteMonitoringBeacon) GetGraphqlOperationTypeOk() (*string, bool) {
	if o == nil || o.GraphqlOperationType == nil {
		return nil, false
	}
	return o.GraphqlOperationType, true
}

// HasGraphqlOperationType returns a boolean if a field has been set.
func (o *WebsiteMonitoringBeacon) HasGraphqlOperationType() bool {
	if o != nil && o.GraphqlOperationType != nil {
		return true
	}

	return false
}

// SetGraphqlOperationType gets a reference to the given string and assigns it to the GraphqlOperationType field.
func (o *WebsiteMonitoringBeacon) SetGraphqlOperationType(v string) {
	o.GraphqlOperationType = &v
}

func (o WebsiteMonitoringBeacon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["websiteId"] = o.WebsiteId
	}
	if true {
		toSerialize["websiteLabel"] = o.WebsiteLabel
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	if o.Phase != nil {
		toSerialize["phase"] = o.Phase
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.ClockSkew != nil {
		toSerialize["clockSkew"] = o.ClockSkew
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.BatchSize != nil {
		toSerialize["batchSize"] = o.BatchSize
	}
	if o.AccurateTimingsAvailable != nil {
		toSerialize["accurateTimingsAvailable"] = o.AccurateTimingsAvailable
	}
	if o.Deprecations != nil {
		toSerialize["deprecations"] = o.Deprecations
	}
	if true {
		toSerialize["pageLoadId"] = o.PageLoadId
	}
	if o.SessionId != nil {
		toSerialize["sessionId"] = o.SessionId
	}
	if true {
		toSerialize["beaconId"] = o.BeaconId
	}
	if o.BackendTraceId != nil {
		toSerialize["backendTraceId"] = o.BackendTraceId
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.CustomEventName != nil {
		toSerialize["customEventName"] = o.CustomEventName
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if true {
		toSerialize["locationUrl"] = o.LocationUrl
	}
	if true {
		toSerialize["locationOrigin"] = o.LocationOrigin
	}
	if o.LocationPath != nil {
		toSerialize["locationPath"] = o.LocationPath
	}
	if o.ErrorCount != nil {
		toSerialize["errorCount"] = o.ErrorCount
	}
	if o.ErrorMessage != nil {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if o.ErrorId != nil {
		toSerialize["errorId"] = o.ErrorId
	}
	if o.ErrorType != nil {
		toSerialize["errorType"] = o.ErrorType
	}
	if o.StackTrace != nil {
		toSerialize["stackTrace"] = o.StackTrace
	}
	if o.StackTraceParsingStatus != nil {
		toSerialize["stackTraceParsingStatus"] = o.StackTraceParsingStatus
	}
	if o.ParsedStackTrace != nil {
		toSerialize["parsedStackTrace"] = o.ParsedStackTrace
	}
	if o.StackTraceReadability != nil {
		toSerialize["stackTraceReadability"] = o.StackTraceReadability
	}
	if o.ComponentStack != nil {
		toSerialize["componentStack"] = o.ComponentStack
	}
	if o.UserIp != nil {
		toSerialize["userIp"] = o.UserIp
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.UserName != nil {
		toSerialize["userName"] = o.UserName
	}
	if o.UserEmail != nil {
		toSerialize["userEmail"] = o.UserEmail
	}
	if o.UserLanguages != nil {
		toSerialize["userLanguages"] = o.UserLanguages
	}
	if o.DeviceType != nil {
		toSerialize["deviceType"] = o.DeviceType
	}
	if o.ConnectionType != nil {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if o.BrowserName != nil {
		toSerialize["browserName"] = o.BrowserName
	}
	if o.BrowserVersion != nil {
		toSerialize["browserVersion"] = o.BrowserVersion
	}
	if o.OsName != nil {
		toSerialize["osName"] = o.OsName
	}
	if o.OsVersion != nil {
		toSerialize["osVersion"] = o.OsVersion
	}
	if o.WindowHidden != nil {
		toSerialize["windowHidden"] = o.WindowHidden
	}
	if o.WindowWidth != nil {
		toSerialize["windowWidth"] = o.WindowWidth
	}
	if o.WindowHeight != nil {
		toSerialize["windowHeight"] = o.WindowHeight
	}
	if o.Latitude != nil {
		toSerialize["latitude"] = o.Latitude
	}
	if o.Longitude != nil {
		toSerialize["longitude"] = o.Longitude
	}
	if o.AccuracyRadius != nil {
		toSerialize["accuracyRadius"] = o.AccuracyRadius
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Subdivision != nil {
		toSerialize["subdivision"] = o.Subdivision
	}
	if o.SubdivisionCode != nil {
		toSerialize["subdivisionCode"] = o.SubdivisionCode
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.CountryCode != nil {
		toSerialize["countryCode"] = o.CountryCode
	}
	if o.Continent != nil {
		toSerialize["continent"] = o.Continent
	}
	if o.ContinentCode != nil {
		toSerialize["continentCode"] = o.ContinentCode
	}
	if o.HttpCallUrl != nil {
		toSerialize["httpCallUrl"] = o.HttpCallUrl
	}
	if o.HttpCallOrigin != nil {
		toSerialize["httpCallOrigin"] = o.HttpCallOrigin
	}
	if o.HttpCallPath != nil {
		toSerialize["httpCallPath"] = o.HttpCallPath
	}
	if o.HttpCallMethod != nil {
		toSerialize["httpCallMethod"] = o.HttpCallMethod
	}
	if o.HttpCallStatus != nil {
		toSerialize["httpCallStatus"] = o.HttpCallStatus
	}
	if o.HttpCallCorrelationAttempted != nil {
		toSerialize["httpCallCorrelationAttempted"] = o.HttpCallCorrelationAttempted
	}
	if o.HttpCallAsynchronous != nil {
		toSerialize["httpCallAsynchronous"] = o.HttpCallAsynchronous
	}
	if o.Initiator != nil {
		toSerialize["initiator"] = o.Initiator
	}
	if o.ResourceType != nil {
		toSerialize["resourceType"] = o.ResourceType
	}
	if o.CacheInteraction != nil {
		toSerialize["cacheInteraction"] = o.CacheInteraction
	}
	if o.EncodedBodySize != nil {
		toSerialize["encodedBodySize"] = o.EncodedBodySize
	}
	if o.DecodedBodySize != nil {
		toSerialize["decodedBodySize"] = o.DecodedBodySize
	}
	if o.TransferSize != nil {
		toSerialize["transferSize"] = o.TransferSize
	}
	if o.UnloadTime != nil {
		toSerialize["unloadTime"] = o.UnloadTime
	}
	if o.RedirectTime != nil {
		toSerialize["redirectTime"] = o.RedirectTime
	}
	if o.AppCacheTime != nil {
		toSerialize["appCacheTime"] = o.AppCacheTime
	}
	if o.DnsTime != nil {
		toSerialize["dnsTime"] = o.DnsTime
	}
	if o.TcpTime != nil {
		toSerialize["tcpTime"] = o.TcpTime
	}
	if o.SslTime != nil {
		toSerialize["sslTime"] = o.SslTime
	}
	if o.RequestTime != nil {
		toSerialize["requestTime"] = o.RequestTime
	}
	if o.ResponseTime != nil {
		toSerialize["responseTime"] = o.ResponseTime
	}
	if o.ProcessingTime != nil {
		toSerialize["processingTime"] = o.ProcessingTime
	}
	if o.OnLoadTime != nil {
		toSerialize["onLoadTime"] = o.OnLoadTime
	}
	if o.BackendTime != nil {
		toSerialize["backendTime"] = o.BackendTime
	}
	if o.FrontendTime != nil {
		toSerialize["frontendTime"] = o.FrontendTime
	}
	if o.DomTime != nil {
		toSerialize["domTime"] = o.DomTime
	}
	if o.ChildrenTime != nil {
		toSerialize["childrenTime"] = o.ChildrenTime
	}
	if o.FirstPaintTime != nil {
		toSerialize["firstPaintTime"] = o.FirstPaintTime
	}
	if o.FirstContentfulPaintTime != nil {
		toSerialize["firstContentfulPaintTime"] = o.FirstContentfulPaintTime
	}
	if o.LargestContentfulPaintTime != nil {
		toSerialize["largestContentfulPaintTime"] = o.LargestContentfulPaintTime
	}
	if o.FirstInputDelayTime != nil {
		toSerialize["firstInputDelayTime"] = o.FirstInputDelayTime
	}
	if o.CumulativeLayoutShift != nil {
		toSerialize["cumulativeLayoutShift"] = o.CumulativeLayoutShift
	}
	if o.CspBlockedUri != nil {
		toSerialize["cspBlockedUri"] = o.CspBlockedUri
	}
	if o.CspEffectiveDirective != nil {
		toSerialize["cspEffectiveDirective"] = o.CspEffectiveDirective
	}
	if o.CspOriginalPolicy != nil {
		toSerialize["cspOriginalPolicy"] = o.CspOriginalPolicy
	}
	if o.CspDisposition != nil {
		toSerialize["cspDisposition"] = o.CspDisposition
	}
	if o.CspSample != nil {
		toSerialize["cspSample"] = o.CspSample
	}
	if o.CspSourceFile != nil {
		toSerialize["cspSourceFile"] = o.CspSourceFile
	}
	if o.CspLineNumber != nil {
		toSerialize["cspLineNumber"] = o.CspLineNumber
	}
	if o.CspColumnNumber != nil {
		toSerialize["cspColumnNumber"] = o.CspColumnNumber
	}
	if o.SnippetVersion != nil {
		toSerialize["snippetVersion"] = o.SnippetVersion
	}
	if o.GraphqlOperationName != nil {
		toSerialize["graphqlOperationName"] = o.GraphqlOperationName
	}
	if o.GraphqlOperationType != nil {
		toSerialize["graphqlOperationType"] = o.GraphqlOperationType
	}
	return json.Marshal(toSerialize)
}

type NullableWebsiteMonitoringBeacon struct {
	value *WebsiteMonitoringBeacon
	isSet bool
}

func (v NullableWebsiteMonitoringBeacon) Get() *WebsiteMonitoringBeacon {
	return v.value
}

func (v *NullableWebsiteMonitoringBeacon) Set(val *WebsiteMonitoringBeacon) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteMonitoringBeacon) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteMonitoringBeacon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteMonitoringBeacon(val *WebsiteMonitoringBeacon) *NullableWebsiteMonitoringBeacon {
	return &NullableWebsiteMonitoringBeacon{value: val, isSet: true}
}

func (v NullableWebsiteMonitoringBeacon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteMonitoringBeacon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
