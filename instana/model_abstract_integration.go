/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// AbstractIntegration struct for AbstractIntegration
type AbstractIntegration struct {
	Id   string `json:"id"`
	Kind string `json:"kind"`
	Name string `json:"name"`
}

// NewAbstractIntegration instantiates a new AbstractIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractIntegration(id string, kind string, name string) *AbstractIntegration {
	this := AbstractIntegration{}
	this.Id = id
	this.Kind = kind
	this.Name = name
	return &this
}

// NewAbstractIntegrationWithDefaults instantiates a new AbstractIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractIntegrationWithDefaults() *AbstractIntegration {
	this := AbstractIntegration{}
	return &this
}

// GetId returns the Id field value
func (o *AbstractIntegration) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AbstractIntegration) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AbstractIntegration) SetId(v string) {
	o.Id = v
}

// GetKind returns the Kind field value
func (o *AbstractIntegration) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *AbstractIntegration) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *AbstractIntegration) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *AbstractIntegration) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AbstractIntegration) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AbstractIntegration) SetName(v string) {
	o.Name = v
}

func (o AbstractIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableAbstractIntegration struct {
	value *AbstractIntegration
	isSet bool
}

func (v NullableAbstractIntegration) Get() *AbstractIntegration {
	return v.value
}

func (v *NullableAbstractIntegration) Set(val *AbstractIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractIntegration(val *AbstractIntegration) *NullableAbstractIntegration {
	return &NullableAbstractIntegration{value: val, isSet: true}
}

func (v NullableAbstractIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
