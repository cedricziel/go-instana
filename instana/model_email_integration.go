/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// EmailIntegration struct for EmailIntegration
type EmailIntegration struct {
	AbstractIntegration
	Emails []string `json:"emails"`
}

// NewEmailIntegration instantiates a new EmailIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailIntegration(emails []string) *EmailIntegration {
	this := EmailIntegration{}
	this.Emails = emails
	return &this
}

// NewEmailIntegrationWithDefaults instantiates a new EmailIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailIntegrationWithDefaults() *EmailIntegration {
	this := EmailIntegration{}
	return &this
}

// GetEmails returns the Emails field value
func (o *EmailIntegration) GetEmails() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *EmailIntegration) GetEmailsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Emails, true
}

// SetEmails sets field value
func (o *EmailIntegration) SetEmails(v []string) {
	o.Emails = v
}

func (o EmailIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAbstractIntegration, errAbstractIntegration := json.Marshal(o.AbstractIntegration)
	if errAbstractIntegration != nil {
		return []byte{}, errAbstractIntegration
	}
	errAbstractIntegration = json.Unmarshal([]byte(serializedAbstractIntegration), &toSerialize)
	if errAbstractIntegration != nil {
		return []byte{}, errAbstractIntegration
	}
	if true {
		toSerialize["emails"] = o.Emails
	}
	return json.Marshal(toSerialize)
}

type NullableEmailIntegration struct {
	value *EmailIntegration
	isSet bool
}

func (v NullableEmailIntegration) Get() *EmailIntegration {
	return v.value
}

func (v *NullableEmailIntegration) Set(val *EmailIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailIntegration(val *EmailIntegration) *NullableEmailIntegration {
	return &NullableEmailIntegration{value: val, isSet: true}
}

func (v NullableEmailIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
