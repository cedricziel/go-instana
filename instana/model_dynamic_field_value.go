/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// DynamicFieldValue struct for DynamicFieldValue
type DynamicFieldValue struct {
	TagName string  `json:"tagName"`
	Key     *string `json:"key,omitempty"`
}

// NewDynamicFieldValue instantiates a new DynamicFieldValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicFieldValue(tagName string) *DynamicFieldValue {
	this := DynamicFieldValue{}
	this.TagName = tagName
	return &this
}

// NewDynamicFieldValueWithDefaults instantiates a new DynamicFieldValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicFieldValueWithDefaults() *DynamicFieldValue {
	this := DynamicFieldValue{}
	return &this
}

// GetTagName returns the TagName field value
func (o *DynamicFieldValue) GetTagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value
// and a boolean to check if the value has been set.
func (o *DynamicFieldValue) GetTagNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagName, true
}

// SetTagName sets field value
func (o *DynamicFieldValue) SetTagName(v string) {
	o.TagName = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DynamicFieldValue) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicFieldValue) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DynamicFieldValue) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DynamicFieldValue) SetKey(v string) {
	o.Key = &v
}

func (o DynamicFieldValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tagName"] = o.TagName
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableDynamicFieldValue struct {
	value *DynamicFieldValue
	isSet bool
}

func (v NullableDynamicFieldValue) Get() *DynamicFieldValue {
	return v.value
}

func (v *NullableDynamicFieldValue) Set(val *DynamicFieldValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicFieldValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicFieldValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicFieldValue(val *DynamicFieldValue) *NullableDynamicFieldValue {
	return &NullableDynamicFieldValue{value: val, isSet: true}
}

func (v NullableDynamicFieldValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicFieldValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
