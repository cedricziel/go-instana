/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// UsersResult struct for UsersResult
type UsersResult struct {
	Users *[]UserResult `json:"users,omitempty"`
}

// NewUsersResult instantiates a new UsersResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersResult() *UsersResult {
	this := UsersResult{}
	return &this
}

// NewUsersResultWithDefaults instantiates a new UsersResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersResultWithDefaults() *UsersResult {
	this := UsersResult{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UsersResult) GetUsers() []UserResult {
	if o == nil || o.Users == nil {
		var ret []UserResult
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersResult) GetUsersOk() (*[]UserResult, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UsersResult) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserResult and assigns it to the Users field.
func (o *UsersResult) SetUsers(v []UserResult) {
	o.Users = &v
}

func (o UsersResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableUsersResult struct {
	value *UsersResult
	isSet bool
}

func (v NullableUsersResult) Get() *UsersResult {
	return v.value
}

func (v *NullableUsersResult) Set(val *UsersResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersResult(val *UsersResult) *NullableUsersResult {
	return &NullableUsersResult{value: val, isSet: true}
}

func (v NullableUsersResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
