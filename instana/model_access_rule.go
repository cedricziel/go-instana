/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// AccessRule struct for AccessRule
type AccessRule struct {
	AccessType   string  `json:"accessType"`
	RelationType string  `json:"relationType"`
	RelatedId    *string `json:"relatedId,omitempty"`
}

// NewAccessRule instantiates a new AccessRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRule(accessType string, relationType string) *AccessRule {
	this := AccessRule{}
	this.AccessType = accessType
	this.RelationType = relationType
	return &this
}

// NewAccessRuleWithDefaults instantiates a new AccessRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRuleWithDefaults() *AccessRule {
	this := AccessRule{}
	return &this
}

// GetAccessType returns the AccessType field value
func (o *AccessRule) GetAccessType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *AccessRule) GetAccessTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *AccessRule) SetAccessType(v string) {
	o.AccessType = v
}

// GetRelationType returns the RelationType field value
func (o *AccessRule) GetRelationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationType
}

// GetRelationTypeOk returns a tuple with the RelationType field value
// and a boolean to check if the value has been set.
func (o *AccessRule) GetRelationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationType, true
}

// SetRelationType sets field value
func (o *AccessRule) SetRelationType(v string) {
	o.RelationType = v
}

// GetRelatedId returns the RelatedId field value if set, zero value otherwise.
func (o *AccessRule) GetRelatedId() string {
	if o == nil || o.RelatedId == nil {
		var ret string
		return ret
	}
	return *o.RelatedId
}

// GetRelatedIdOk returns a tuple with the RelatedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRule) GetRelatedIdOk() (*string, bool) {
	if o == nil || o.RelatedId == nil {
		return nil, false
	}
	return o.RelatedId, true
}

// HasRelatedId returns a boolean if a field has been set.
func (o *AccessRule) HasRelatedId() bool {
	if o != nil && o.RelatedId != nil {
		return true
	}

	return false
}

// SetRelatedId gets a reference to the given string and assigns it to the RelatedId field.
func (o *AccessRule) SetRelatedId(v string) {
	o.RelatedId = &v
}

func (o AccessRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accessType"] = o.AccessType
	}
	if true {
		toSerialize["relationType"] = o.RelationType
	}
	if o.RelatedId != nil {
		toSerialize["relatedId"] = o.RelatedId
	}
	return json.Marshal(toSerialize)
}

type NullableAccessRule struct {
	value *AccessRule
	isSet bool
}

func (v NullableAccessRule) Get() *AccessRule {
	return v.value
}

func (v *NullableAccessRule) Set(val *AccessRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRule(val *AccessRule) *NullableAccessRule {
	return &NullableAccessRule{value: val, isSet: true}
}

func (v NullableAccessRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
