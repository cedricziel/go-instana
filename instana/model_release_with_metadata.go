/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// ReleaseWithMetadata struct for ReleaseWithMetadata
type ReleaseWithMetadata struct {
	Id           string                          `json:"id"`
	Name         string                          `json:"name"`
	Start        *int64                          `json:"start,omitempty"`
	LastUpdated  *int64                          `json:"lastUpdated,omitempty"`
	Scopes       *[]ReleaseScope                 `json:"scopes,omitempty"`
	Services     *[]ServiceScopeWithMetadata     `json:"services,omitempty"`
	Applications *[]ApplicationScopeWithMetadata `json:"applications,omitempty"`
}

// NewReleaseWithMetadata instantiates a new ReleaseWithMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseWithMetadata(id string, name string) *ReleaseWithMetadata {
	this := ReleaseWithMetadata{}
	this.Id = id
	this.Name = name
	return &this
}

// NewReleaseWithMetadataWithDefaults instantiates a new ReleaseWithMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseWithMetadataWithDefaults() *ReleaseWithMetadata {
	this := ReleaseWithMetadata{}
	return &this
}

// GetId returns the Id field value
func (o *ReleaseWithMetadata) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReleaseWithMetadata) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReleaseWithMetadata) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ReleaseWithMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReleaseWithMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReleaseWithMetadata) SetName(v string) {
	o.Name = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ReleaseWithMetadata) GetStart() int64 {
	if o == nil || o.Start == nil {
		var ret int64
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseWithMetadata) GetStartOk() (*int64, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ReleaseWithMetadata) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given int64 and assigns it to the Start field.
func (o *ReleaseWithMetadata) SetStart(v int64) {
	o.Start = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *ReleaseWithMetadata) GetLastUpdated() int64 {
	if o == nil || o.LastUpdated == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseWithMetadata) GetLastUpdatedOk() (*int64, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *ReleaseWithMetadata) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given int64 and assigns it to the LastUpdated field.
func (o *ReleaseWithMetadata) SetLastUpdated(v int64) {
	o.LastUpdated = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ReleaseWithMetadata) GetScopes() []ReleaseScope {
	if o == nil || o.Scopes == nil {
		var ret []ReleaseScope
		return ret
	}
	return *o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseWithMetadata) GetScopesOk() (*[]ReleaseScope, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ReleaseWithMetadata) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []ReleaseScope and assigns it to the Scopes field.
func (o *ReleaseWithMetadata) SetScopes(v []ReleaseScope) {
	o.Scopes = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *ReleaseWithMetadata) GetServices() []ServiceScopeWithMetadata {
	if o == nil || o.Services == nil {
		var ret []ServiceScopeWithMetadata
		return ret
	}
	return *o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseWithMetadata) GetServicesOk() (*[]ServiceScopeWithMetadata, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ReleaseWithMetadata) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given []ServiceScopeWithMetadata and assigns it to the Services field.
func (o *ReleaseWithMetadata) SetServices(v []ServiceScopeWithMetadata) {
	o.Services = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *ReleaseWithMetadata) GetApplications() []ApplicationScopeWithMetadata {
	if o == nil || o.Applications == nil {
		var ret []ApplicationScopeWithMetadata
		return ret
	}
	return *o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseWithMetadata) GetApplicationsOk() (*[]ApplicationScopeWithMetadata, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *ReleaseWithMetadata) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []ApplicationScopeWithMetadata and assigns it to the Applications field.
func (o *ReleaseWithMetadata) SetApplications(v []ApplicationScopeWithMetadata) {
	o.Applications = &v
}

func (o ReleaseWithMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	return json.Marshal(toSerialize)
}

type NullableReleaseWithMetadata struct {
	value *ReleaseWithMetadata
	isSet bool
}

func (v NullableReleaseWithMetadata) Get() *ReleaseWithMetadata {
	return v.value
}

func (v *NullableReleaseWithMetadata) Set(val *ReleaseWithMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseWithMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseWithMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseWithMetadata(val *ReleaseWithMetadata) *NullableReleaseWithMetadata {
	return &NullableReleaseWithMetadata{value: val, isSet: true}
}

func (v NullableReleaseWithMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseWithMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
