/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// ScopedGroup struct for ScopedGroup
type ScopedGroup struct {
	Id          *string           `json:"id,omitempty"`
	Name        string            `json:"name"`
	Members     []GroupMember     `json:"members"`
	Permissions []GroupPermission `json:"permissions"`
}

// NewScopedGroup instantiates a new ScopedGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopedGroup(name string, members []GroupMember, permissions []GroupPermission) *ScopedGroup {
	this := ScopedGroup{}
	this.Name = name
	this.Members = members
	this.Permissions = permissions
	return &this
}

// NewScopedGroupWithDefaults instantiates a new ScopedGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopedGroupWithDefaults() *ScopedGroup {
	this := ScopedGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScopedGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopedGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScopedGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScopedGroup) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ScopedGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScopedGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScopedGroup) SetName(v string) {
	o.Name = v
}

// GetMembers returns the Members field value
func (o *ScopedGroup) GetMembers() []GroupMember {
	if o == nil {
		var ret []GroupMember
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *ScopedGroup) GetMembersOk() (*[]GroupMember, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Members, true
}

// SetMembers sets field value
func (o *ScopedGroup) SetMembers(v []GroupMember) {
	o.Members = v
}

// GetPermissions returns the Permissions field value
func (o *ScopedGroup) GetPermissions() []GroupPermission {
	if o == nil {
		var ret []GroupPermission
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *ScopedGroup) GetPermissionsOk() (*[]GroupPermission, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *ScopedGroup) SetPermissions(v []GroupPermission) {
	o.Permissions = v
}

func (o ScopedGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["members"] = o.Members
	}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableScopedGroup struct {
	value *ScopedGroup
	isSet bool
}

func (v NullableScopedGroup) Get() *ScopedGroup {
	return v.value
}

func (v *NullableScopedGroup) Set(val *ScopedGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableScopedGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableScopedGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopedGroup(val *ScopedGroup) *NullableScopedGroup {
	return &NullableScopedGroup{value: val, isSet: true}
}

func (v NullableScopedGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopedGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
