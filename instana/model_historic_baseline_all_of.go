/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// HistoricBaselineAllOf struct for HistoricBaselineAllOf
type HistoricBaselineAllOf struct {
	Seasonality     *string      `json:"seasonality,omitempty"`
	Baseline        *[][]float32 `json:"baseline,omitempty"`
	DeviationFactor *float64     `json:"deviationFactor,omitempty"`
}

// NewHistoricBaselineAllOf instantiates a new HistoricBaselineAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricBaselineAllOf() *HistoricBaselineAllOf {
	this := HistoricBaselineAllOf{}
	return &this
}

// NewHistoricBaselineAllOfWithDefaults instantiates a new HistoricBaselineAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricBaselineAllOfWithDefaults() *HistoricBaselineAllOf {
	this := HistoricBaselineAllOf{}
	return &this
}

// GetSeasonality returns the Seasonality field value if set, zero value otherwise.
func (o *HistoricBaselineAllOf) GetSeasonality() string {
	if o == nil || o.Seasonality == nil {
		var ret string
		return ret
	}
	return *o.Seasonality
}

// GetSeasonalityOk returns a tuple with the Seasonality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricBaselineAllOf) GetSeasonalityOk() (*string, bool) {
	if o == nil || o.Seasonality == nil {
		return nil, false
	}
	return o.Seasonality, true
}

// HasSeasonality returns a boolean if a field has been set.
func (o *HistoricBaselineAllOf) HasSeasonality() bool {
	if o != nil && o.Seasonality != nil {
		return true
	}

	return false
}

// SetSeasonality gets a reference to the given string and assigns it to the Seasonality field.
func (o *HistoricBaselineAllOf) SetSeasonality(v string) {
	o.Seasonality = &v
}

// GetBaseline returns the Baseline field value if set, zero value otherwise.
func (o *HistoricBaselineAllOf) GetBaseline() [][]float32 {
	if o == nil || o.Baseline == nil {
		var ret [][]float32
		return ret
	}
	return *o.Baseline
}

// GetBaselineOk returns a tuple with the Baseline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricBaselineAllOf) GetBaselineOk() (*[][]float32, bool) {
	if o == nil || o.Baseline == nil {
		return nil, false
	}
	return o.Baseline, true
}

// HasBaseline returns a boolean if a field has been set.
func (o *HistoricBaselineAllOf) HasBaseline() bool {
	if o != nil && o.Baseline != nil {
		return true
	}

	return false
}

// SetBaseline gets a reference to the given [][]float32 and assigns it to the Baseline field.
func (o *HistoricBaselineAllOf) SetBaseline(v [][]float32) {
	o.Baseline = &v
}

// GetDeviationFactor returns the DeviationFactor field value if set, zero value otherwise.
func (o *HistoricBaselineAllOf) GetDeviationFactor() float64 {
	if o == nil || o.DeviationFactor == nil {
		var ret float64
		return ret
	}
	return *o.DeviationFactor
}

// GetDeviationFactorOk returns a tuple with the DeviationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricBaselineAllOf) GetDeviationFactorOk() (*float64, bool) {
	if o == nil || o.DeviationFactor == nil {
		return nil, false
	}
	return o.DeviationFactor, true
}

// HasDeviationFactor returns a boolean if a field has been set.
func (o *HistoricBaselineAllOf) HasDeviationFactor() bool {
	if o != nil && o.DeviationFactor != nil {
		return true
	}

	return false
}

// SetDeviationFactor gets a reference to the given float64 and assigns it to the DeviationFactor field.
func (o *HistoricBaselineAllOf) SetDeviationFactor(v float64) {
	o.DeviationFactor = &v
}

func (o HistoricBaselineAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Seasonality != nil {
		toSerialize["seasonality"] = o.Seasonality
	}
	if o.Baseline != nil {
		toSerialize["baseline"] = o.Baseline
	}
	if o.DeviationFactor != nil {
		toSerialize["deviationFactor"] = o.DeviationFactor
	}
	return json.Marshal(toSerialize)
}

type NullableHistoricBaselineAllOf struct {
	value *HistoricBaselineAllOf
	isSet bool
}

func (v NullableHistoricBaselineAllOf) Get() *HistoricBaselineAllOf {
	return v.value
}

func (v *NullableHistoricBaselineAllOf) Set(val *HistoricBaselineAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricBaselineAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricBaselineAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricBaselineAllOf(val *HistoricBaselineAllOf) *NullableHistoricBaselineAllOf {
	return &NullableHistoricBaselineAllOf{value: val, isSet: true}
}

func (v NullableHistoricBaselineAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricBaselineAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
