/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// PhysicalContext struct for PhysicalContext
type PhysicalContext struct {
	Process      *SnapshotPreview             `json:"process,omitempty"`
	Container    *SnapshotPreview             `json:"container,omitempty"`
	Host         *SnapshotPreview             `json:"host,omitempty"`
	Cluster      *SnapshotPreview             `json:"cluster,omitempty"`
	Cloudfoundry *CloudfoundryPhysicalContext `json:"cloudfoundry,omitempty"`
	Kubernetes   *KubernetesPhysicalContext   `json:"kubernetes,omitempty"`
}

// NewPhysicalContext instantiates a new PhysicalContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalContext() *PhysicalContext {
	this := PhysicalContext{}
	return &this
}

// NewPhysicalContextWithDefaults instantiates a new PhysicalContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalContextWithDefaults() *PhysicalContext {
	this := PhysicalContext{}
	return &this
}

// GetProcess returns the Process field value if set, zero value otherwise.
func (o *PhysicalContext) GetProcess() SnapshotPreview {
	if o == nil || o.Process == nil {
		var ret SnapshotPreview
		return ret
	}
	return *o.Process
}

// GetProcessOk returns a tuple with the Process field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalContext) GetProcessOk() (*SnapshotPreview, bool) {
	if o == nil || o.Process == nil {
		return nil, false
	}
	return o.Process, true
}

// HasProcess returns a boolean if a field has been set.
func (o *PhysicalContext) HasProcess() bool {
	if o != nil && o.Process != nil {
		return true
	}

	return false
}

// SetProcess gets a reference to the given SnapshotPreview and assigns it to the Process field.
func (o *PhysicalContext) SetProcess(v SnapshotPreview) {
	o.Process = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *PhysicalContext) GetContainer() SnapshotPreview {
	if o == nil || o.Container == nil {
		var ret SnapshotPreview
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalContext) GetContainerOk() (*SnapshotPreview, bool) {
	if o == nil || o.Container == nil {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *PhysicalContext) HasContainer() bool {
	if o != nil && o.Container != nil {
		return true
	}

	return false
}

// SetContainer gets a reference to the given SnapshotPreview and assigns it to the Container field.
func (o *PhysicalContext) SetContainer(v SnapshotPreview) {
	o.Container = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *PhysicalContext) GetHost() SnapshotPreview {
	if o == nil || o.Host == nil {
		var ret SnapshotPreview
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalContext) GetHostOk() (*SnapshotPreview, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *PhysicalContext) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given SnapshotPreview and assigns it to the Host field.
func (o *PhysicalContext) SetHost(v SnapshotPreview) {
	o.Host = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *PhysicalContext) GetCluster() SnapshotPreview {
	if o == nil || o.Cluster == nil {
		var ret SnapshotPreview
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalContext) GetClusterOk() (*SnapshotPreview, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *PhysicalContext) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given SnapshotPreview and assigns it to the Cluster field.
func (o *PhysicalContext) SetCluster(v SnapshotPreview) {
	o.Cluster = &v
}

// GetCloudfoundry returns the Cloudfoundry field value if set, zero value otherwise.
func (o *PhysicalContext) GetCloudfoundry() CloudfoundryPhysicalContext {
	if o == nil || o.Cloudfoundry == nil {
		var ret CloudfoundryPhysicalContext
		return ret
	}
	return *o.Cloudfoundry
}

// GetCloudfoundryOk returns a tuple with the Cloudfoundry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalContext) GetCloudfoundryOk() (*CloudfoundryPhysicalContext, bool) {
	if o == nil || o.Cloudfoundry == nil {
		return nil, false
	}
	return o.Cloudfoundry, true
}

// HasCloudfoundry returns a boolean if a field has been set.
func (o *PhysicalContext) HasCloudfoundry() bool {
	if o != nil && o.Cloudfoundry != nil {
		return true
	}

	return false
}

// SetCloudfoundry gets a reference to the given CloudfoundryPhysicalContext and assigns it to the Cloudfoundry field.
func (o *PhysicalContext) SetCloudfoundry(v CloudfoundryPhysicalContext) {
	o.Cloudfoundry = &v
}

// GetKubernetes returns the Kubernetes field value if set, zero value otherwise.
func (o *PhysicalContext) GetKubernetes() KubernetesPhysicalContext {
	if o == nil || o.Kubernetes == nil {
		var ret KubernetesPhysicalContext
		return ret
	}
	return *o.Kubernetes
}

// GetKubernetesOk returns a tuple with the Kubernetes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalContext) GetKubernetesOk() (*KubernetesPhysicalContext, bool) {
	if o == nil || o.Kubernetes == nil {
		return nil, false
	}
	return o.Kubernetes, true
}

// HasKubernetes returns a boolean if a field has been set.
func (o *PhysicalContext) HasKubernetes() bool {
	if o != nil && o.Kubernetes != nil {
		return true
	}

	return false
}

// SetKubernetes gets a reference to the given KubernetesPhysicalContext and assigns it to the Kubernetes field.
func (o *PhysicalContext) SetKubernetes(v KubernetesPhysicalContext) {
	o.Kubernetes = &v
}

func (o PhysicalContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Process != nil {
		toSerialize["process"] = o.Process
	}
	if o.Container != nil {
		toSerialize["container"] = o.Container
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	if o.Cloudfoundry != nil {
		toSerialize["cloudfoundry"] = o.Cloudfoundry
	}
	if o.Kubernetes != nil {
		toSerialize["kubernetes"] = o.Kubernetes
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalContext struct {
	value *PhysicalContext
	isSet bool
}

func (v NullablePhysicalContext) Get() *PhysicalContext {
	return v.value
}

func (v *NullablePhysicalContext) Set(val *PhysicalContext) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalContext) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalContext(val *PhysicalContext) *NullablePhysicalContext {
	return &NullablePhysicalContext{value: val, isSet: true}
}

func (v NullablePhysicalContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
