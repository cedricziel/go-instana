/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// UsageResult struct for UsageResult
type UsageResult struct {
	Time  *int64              `json:"time,omitempty"`
	Items *[]UsageResultItems `json:"items,omitempty"`
}

// NewUsageResult instantiates a new UsageResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageResult() *UsageResult {
	this := UsageResult{}
	return &this
}

// NewUsageResultWithDefaults instantiates a new UsageResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageResultWithDefaults() *UsageResult {
	this := UsageResult{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *UsageResult) GetTime() int64 {
	if o == nil || o.Time == nil {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResult) GetTimeOk() (*int64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *UsageResult) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *UsageResult) SetTime(v int64) {
	o.Time = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *UsageResult) GetItems() []UsageResultItems {
	if o == nil || o.Items == nil {
		var ret []UsageResultItems
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResult) GetItemsOk() (*[]UsageResultItems, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *UsageResult) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []UsageResultItems and assigns it to the Items field.
func (o *UsageResult) SetItems(v []UsageResultItems) {
	o.Items = &v
}

func (o UsageResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableUsageResult struct {
	value *UsageResult
	isSet bool
}

func (v NullableUsageResult) Get() *UsageResult {
	return v.value
}

func (v *NullableUsageResult) Set(val *UsageResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageResult(val *UsageResult) *NullableUsageResult {
	return &NullableUsageResult{value: val, isSet: true}
}

func (v NullableUsageResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
