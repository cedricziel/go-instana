/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// ServiceConfig struct for ServiceConfig
type ServiceConfig struct {
	Id                 string                `json:"id"`
	Name               string                `json:"name"`
	Comment            *string               `json:"comment,omitempty"`
	Label              string                `json:"label"`
	Enabled            bool                  `json:"enabled"`
	MatchSpecification []ServiceMatchingRule `json:"matchSpecification"`
}

// NewServiceConfig instantiates a new ServiceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceConfig(id string, name string, label string, enabled bool, matchSpecification []ServiceMatchingRule) *ServiceConfig {
	this := ServiceConfig{}
	this.Id = id
	this.Name = name
	this.Label = label
	this.Enabled = enabled
	this.MatchSpecification = matchSpecification
	return &this
}

// NewServiceConfigWithDefaults instantiates a new ServiceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceConfigWithDefaults() *ServiceConfig {
	this := ServiceConfig{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceConfig) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceConfig) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServiceConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceConfig) SetName(v string) {
	o.Name = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ServiceConfig) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceConfig) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ServiceConfig) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ServiceConfig) SetComment(v string) {
	o.Comment = &v
}

// GetLabel returns the Label field value
func (o *ServiceConfig) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServiceConfig) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServiceConfig) SetLabel(v string) {
	o.Label = v
}

// GetEnabled returns the Enabled field value
func (o *ServiceConfig) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ServiceConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ServiceConfig) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMatchSpecification returns the MatchSpecification field value
func (o *ServiceConfig) GetMatchSpecification() []ServiceMatchingRule {
	if o == nil {
		var ret []ServiceMatchingRule
		return ret
	}

	return o.MatchSpecification
}

// GetMatchSpecificationOk returns a tuple with the MatchSpecification field value
// and a boolean to check if the value has been set.
func (o *ServiceConfig) GetMatchSpecificationOk() (*[]ServiceMatchingRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchSpecification, true
}

// SetMatchSpecification sets field value
func (o *ServiceConfig) SetMatchSpecification(v []ServiceMatchingRule) {
	o.MatchSpecification = v
}

func (o ServiceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["matchSpecification"] = o.MatchSpecification
	}
	return json.Marshal(toSerialize)
}

type NullableServiceConfig struct {
	value *ServiceConfig
	isSet bool
}

func (v NullableServiceConfig) Get() *ServiceConfig {
	return v.value
}

func (v *NullableServiceConfig) Set(val *ServiceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceConfig(val *ServiceConfig) *NullableServiceConfig {
	return &NullableServiceConfig{value: val, isSet: true}
}

func (v NullableServiceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
