/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// BinaryOperatorDTOAllOf struct for BinaryOperatorDTOAllOf
type BinaryOperatorDTOAllOf struct {
	Left        *MatchExpressionDTO `json:"left,omitempty"`
	Right       *MatchExpressionDTO `json:"right,omitempty"`
	Conjunction *string             `json:"conjunction,omitempty"`
}

// NewBinaryOperatorDTOAllOf instantiates a new BinaryOperatorDTOAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinaryOperatorDTOAllOf() *BinaryOperatorDTOAllOf {
	this := BinaryOperatorDTOAllOf{}
	return &this
}

// NewBinaryOperatorDTOAllOfWithDefaults instantiates a new BinaryOperatorDTOAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinaryOperatorDTOAllOfWithDefaults() *BinaryOperatorDTOAllOf {
	this := BinaryOperatorDTOAllOf{}
	return &this
}

// GetLeft returns the Left field value if set, zero value otherwise.
func (o *BinaryOperatorDTOAllOf) GetLeft() MatchExpressionDTO {
	if o == nil || o.Left == nil {
		var ret MatchExpressionDTO
		return ret
	}
	return *o.Left
}

// GetLeftOk returns a tuple with the Left field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryOperatorDTOAllOf) GetLeftOk() (*MatchExpressionDTO, bool) {
	if o == nil || o.Left == nil {
		return nil, false
	}
	return o.Left, true
}

// HasLeft returns a boolean if a field has been set.
func (o *BinaryOperatorDTOAllOf) HasLeft() bool {
	if o != nil && o.Left != nil {
		return true
	}

	return false
}

// SetLeft gets a reference to the given MatchExpressionDTO and assigns it to the Left field.
func (o *BinaryOperatorDTOAllOf) SetLeft(v MatchExpressionDTO) {
	o.Left = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *BinaryOperatorDTOAllOf) GetRight() MatchExpressionDTO {
	if o == nil || o.Right == nil {
		var ret MatchExpressionDTO
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryOperatorDTOAllOf) GetRightOk() (*MatchExpressionDTO, bool) {
	if o == nil || o.Right == nil {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *BinaryOperatorDTOAllOf) HasRight() bool {
	if o != nil && o.Right != nil {
		return true
	}

	return false
}

// SetRight gets a reference to the given MatchExpressionDTO and assigns it to the Right field.
func (o *BinaryOperatorDTOAllOf) SetRight(v MatchExpressionDTO) {
	o.Right = &v
}

// GetConjunction returns the Conjunction field value if set, zero value otherwise.
func (o *BinaryOperatorDTOAllOf) GetConjunction() string {
	if o == nil || o.Conjunction == nil {
		var ret string
		return ret
	}
	return *o.Conjunction
}

// GetConjunctionOk returns a tuple with the Conjunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinaryOperatorDTOAllOf) GetConjunctionOk() (*string, bool) {
	if o == nil || o.Conjunction == nil {
		return nil, false
	}
	return o.Conjunction, true
}

// HasConjunction returns a boolean if a field has been set.
func (o *BinaryOperatorDTOAllOf) HasConjunction() bool {
	if o != nil && o.Conjunction != nil {
		return true
	}

	return false
}

// SetConjunction gets a reference to the given string and assigns it to the Conjunction field.
func (o *BinaryOperatorDTOAllOf) SetConjunction(v string) {
	o.Conjunction = &v
}

func (o BinaryOperatorDTOAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Left != nil {
		toSerialize["left"] = o.Left
	}
	if o.Right != nil {
		toSerialize["right"] = o.Right
	}
	if o.Conjunction != nil {
		toSerialize["conjunction"] = o.Conjunction
	}
	return json.Marshal(toSerialize)
}

type NullableBinaryOperatorDTOAllOf struct {
	value *BinaryOperatorDTOAllOf
	isSet bool
}

func (v NullableBinaryOperatorDTOAllOf) Get() *BinaryOperatorDTOAllOf {
	return v.value
}

func (v *NullableBinaryOperatorDTOAllOf) Set(val *BinaryOperatorDTOAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBinaryOperatorDTOAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBinaryOperatorDTOAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinaryOperatorDTOAllOf(val *BinaryOperatorDTOAllOf) *NullableBinaryOperatorDTOAllOf {
	return &NullableBinaryOperatorDTOAllOf{value: val, isSet: true}
}

func (v NullableBinaryOperatorDTOAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinaryOperatorDTOAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
