/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// TreeNodeResult struct for TreeNodeResult
type TreeNodeResult struct {
	Tree *[]TreeNode `json:"tree,omitempty"`
}

// NewTreeNodeResult instantiates a new TreeNodeResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeNodeResult() *TreeNodeResult {
	this := TreeNodeResult{}
	return &this
}

// NewTreeNodeResultWithDefaults instantiates a new TreeNodeResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeNodeResultWithDefaults() *TreeNodeResult {
	this := TreeNodeResult{}
	return &this
}

// GetTree returns the Tree field value if set, zero value otherwise.
func (o *TreeNodeResult) GetTree() []TreeNode {
	if o == nil || o.Tree == nil {
		var ret []TreeNode
		return ret
	}
	return *o.Tree
}

// GetTreeOk returns a tuple with the Tree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNodeResult) GetTreeOk() (*[]TreeNode, bool) {
	if o == nil || o.Tree == nil {
		return nil, false
	}
	return o.Tree, true
}

// HasTree returns a boolean if a field has been set.
func (o *TreeNodeResult) HasTree() bool {
	if o != nil && o.Tree != nil {
		return true
	}

	return false
}

// SetTree gets a reference to the given []TreeNode and assigns it to the Tree field.
func (o *TreeNodeResult) SetTree(v []TreeNode) {
	o.Tree = &v
}

func (o TreeNodeResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tree != nil {
		toSerialize["tree"] = o.Tree
	}
	return json.Marshal(toSerialize)
}

type NullableTreeNodeResult struct {
	value *TreeNodeResult
	isSet bool
}

func (v NullableTreeNodeResult) Get() *TreeNodeResult {
	return v.value
}

func (v *NullableTreeNodeResult) Set(val *TreeNodeResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeNodeResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeNodeResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeNodeResult(val *TreeNodeResult) *NullableTreeNodeResult {
	return &NullableTreeNodeResult{value: val, isSet: true}
}

func (v NullableTreeNodeResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeNodeResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
