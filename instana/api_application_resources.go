/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// ApplicationResourcesApiService ApplicationResourcesApi service
type ApplicationResourcesApiService service

type ApiApplicationResourcesEndpointsRequest struct {
	ctx                      _context.Context
	ApiService               *ApplicationResourcesApiService
	nameFilter               *string
	types                    *[]string
	technologies             *[]string
	windowSize               *int64
	to                       *int64
	page                     *int32
	pageSize                 *int32
	applicationBoundaryScope *string
}

func (r ApiApplicationResourcesEndpointsRequest) NameFilter(nameFilter string) ApiApplicationResourcesEndpointsRequest {
	r.nameFilter = &nameFilter
	return r
}
func (r ApiApplicationResourcesEndpointsRequest) Types(types []string) ApiApplicationResourcesEndpointsRequest {
	r.types = &types
	return r
}
func (r ApiApplicationResourcesEndpointsRequest) Technologies(technologies []string) ApiApplicationResourcesEndpointsRequest {
	r.technologies = &technologies
	return r
}
func (r ApiApplicationResourcesEndpointsRequest) WindowSize(windowSize int64) ApiApplicationResourcesEndpointsRequest {
	r.windowSize = &windowSize
	return r
}
func (r ApiApplicationResourcesEndpointsRequest) To(to int64) ApiApplicationResourcesEndpointsRequest {
	r.to = &to
	return r
}
func (r ApiApplicationResourcesEndpointsRequest) Page(page int32) ApiApplicationResourcesEndpointsRequest {
	r.page = &page
	return r
}
func (r ApiApplicationResourcesEndpointsRequest) PageSize(pageSize int32) ApiApplicationResourcesEndpointsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiApplicationResourcesEndpointsRequest) ApplicationBoundaryScope(applicationBoundaryScope string) ApiApplicationResourcesEndpointsRequest {
	r.applicationBoundaryScope = &applicationBoundaryScope
	return r
}

func (r ApiApplicationResourcesEndpointsRequest) Execute() (EndpointResult, *_nethttp.Response, error) {
	return r.ApiService.ApplicationResourcesEndpointsExecute(r)
}

/*
 * ApplicationResourcesEndpoints Get endpoints
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApplicationResourcesEndpointsRequest
 */
func (a *ApplicationResourcesApiService) ApplicationResourcesEndpoints(ctx _context.Context) ApiApplicationResourcesEndpointsRequest {
	return ApiApplicationResourcesEndpointsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return EndpointResult
 */
func (a *ApplicationResourcesApiService) ApplicationResourcesEndpointsExecute(r ApiApplicationResourcesEndpointsRequest) (EndpointResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EndpointResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationResourcesApiService.ApplicationResourcesEndpoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/application-monitoring/applications/services/endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.nameFilter != nil {
		localVarQueryParams.Add("nameFilter", parameterToString(*r.nameFilter, ""))
	}
	if r.types != nil {
		t := *r.types
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("types", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("types", parameterToString(t, "multi"))
		}
	}
	if r.technologies != nil {
		t := *r.technologies
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("technologies", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("technologies", parameterToString(t, "multi"))
		}
	}
	if r.windowSize != nil {
		localVarQueryParams.Add("windowSize", parameterToString(*r.windowSize, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.applicationBoundaryScope != nil {
		localVarQueryParams.Add("applicationBoundaryScope", parameterToString(*r.applicationBoundaryScope, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v EndpointResult
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApplicationServicesRequest struct {
	ctx                      _context.Context
	ApiService               *ApplicationResourcesApiService
	nameFilter               *string
	windowSize               *int64
	to                       *int64
	page                     *int32
	pageSize                 *int32
	applicationBoundaryScope *string
}

func (r ApiGetApplicationServicesRequest) NameFilter(nameFilter string) ApiGetApplicationServicesRequest {
	r.nameFilter = &nameFilter
	return r
}
func (r ApiGetApplicationServicesRequest) WindowSize(windowSize int64) ApiGetApplicationServicesRequest {
	r.windowSize = &windowSize
	return r
}
func (r ApiGetApplicationServicesRequest) To(to int64) ApiGetApplicationServicesRequest {
	r.to = &to
	return r
}
func (r ApiGetApplicationServicesRequest) Page(page int32) ApiGetApplicationServicesRequest {
	r.page = &page
	return r
}
func (r ApiGetApplicationServicesRequest) PageSize(pageSize int32) ApiGetApplicationServicesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGetApplicationServicesRequest) ApplicationBoundaryScope(applicationBoundaryScope string) ApiGetApplicationServicesRequest {
	r.applicationBoundaryScope = &applicationBoundaryScope
	return r
}

func (r ApiGetApplicationServicesRequest) Execute() (ServiceResult, *_nethttp.Response, error) {
	return r.ApiService.GetApplicationServicesExecute(r)
}

/*
 * GetApplicationServices Get applications/services
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetApplicationServicesRequest
 */
func (a *ApplicationResourcesApiService) GetApplicationServices(ctx _context.Context) ApiGetApplicationServicesRequest {
	return ApiGetApplicationServicesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ServiceResult
 */
func (a *ApplicationResourcesApiService) GetApplicationServicesExecute(r ApiGetApplicationServicesRequest) (ServiceResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ServiceResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationResourcesApiService.GetApplicationServices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/application-monitoring/applications/services"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.nameFilter != nil {
		localVarQueryParams.Add("nameFilter", parameterToString(*r.nameFilter, ""))
	}
	if r.windowSize != nil {
		localVarQueryParams.Add("windowSize", parameterToString(*r.windowSize, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.applicationBoundaryScope != nil {
		localVarQueryParams.Add("applicationBoundaryScope", parameterToString(*r.applicationBoundaryScope, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ServiceResult
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetApplicationsRequest struct {
	ctx                      _context.Context
	ApiService               *ApplicationResourcesApiService
	nameFilter               *string
	windowSize               *int64
	to                       *int64
	page                     *int32
	pageSize                 *int32
	applicationBoundaryScope *string
}

func (r ApiGetApplicationsRequest) NameFilter(nameFilter string) ApiGetApplicationsRequest {
	r.nameFilter = &nameFilter
	return r
}
func (r ApiGetApplicationsRequest) WindowSize(windowSize int64) ApiGetApplicationsRequest {
	r.windowSize = &windowSize
	return r
}
func (r ApiGetApplicationsRequest) To(to int64) ApiGetApplicationsRequest {
	r.to = &to
	return r
}
func (r ApiGetApplicationsRequest) Page(page int32) ApiGetApplicationsRequest {
	r.page = &page
	return r
}
func (r ApiGetApplicationsRequest) PageSize(pageSize int32) ApiGetApplicationsRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGetApplicationsRequest) ApplicationBoundaryScope(applicationBoundaryScope string) ApiGetApplicationsRequest {
	r.applicationBoundaryScope = &applicationBoundaryScope
	return r
}

func (r ApiGetApplicationsRequest) Execute() (ApplicationResult, *_nethttp.Response, error) {
	return r.ApiService.GetApplicationsExecute(r)
}

/*
 * GetApplications Get applications
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetApplicationsRequest
 */
func (a *ApplicationResourcesApiService) GetApplications(ctx _context.Context) ApiGetApplicationsRequest {
	return ApiGetApplicationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ApplicationResult
 */
func (a *ApplicationResourcesApiService) GetApplicationsExecute(r ApiGetApplicationsRequest) (ApplicationResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ApplicationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationResourcesApiService.GetApplications")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/application-monitoring/applications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.nameFilter != nil {
		localVarQueryParams.Add("nameFilter", parameterToString(*r.nameFilter, ""))
	}
	if r.windowSize != nil {
		localVarQueryParams.Add("windowSize", parameterToString(*r.windowSize, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.applicationBoundaryScope != nil {
		localVarQueryParams.Add("applicationBoundaryScope", parameterToString(*r.applicationBoundaryScope, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ApplicationResult
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServicesRequest struct {
	ctx        _context.Context
	ApiService *ApplicationResourcesApiService
	nameFilter *string
	windowSize *int64
	to         *int64
	page       *int32
	pageSize   *int32
}

func (r ApiGetServicesRequest) NameFilter(nameFilter string) ApiGetServicesRequest {
	r.nameFilter = &nameFilter
	return r
}
func (r ApiGetServicesRequest) WindowSize(windowSize int64) ApiGetServicesRequest {
	r.windowSize = &windowSize
	return r
}
func (r ApiGetServicesRequest) To(to int64) ApiGetServicesRequest {
	r.to = &to
	return r
}
func (r ApiGetServicesRequest) Page(page int32) ApiGetServicesRequest {
	r.page = &page
	return r
}
func (r ApiGetServicesRequest) PageSize(pageSize int32) ApiGetServicesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServicesRequest) Execute() (ServiceResult, *_nethttp.Response, error) {
	return r.ApiService.GetServicesExecute(r)
}

/*
 * GetServices Get services
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetServicesRequest
 */
func (a *ApplicationResourcesApiService) GetServices(ctx _context.Context) ApiGetServicesRequest {
	return ApiGetServicesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return ServiceResult
 */
func (a *ApplicationResourcesApiService) GetServicesExecute(r ApiGetServicesRequest) (ServiceResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ServiceResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationResourcesApiService.GetServices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/application-monitoring/services"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.nameFilter != nil {
		localVarQueryParams.Add("nameFilter", parameterToString(*r.nameFilter, ""))
	}
	if r.windowSize != nil {
		localVarQueryParams.Add("windowSize", parameterToString(*r.windowSize, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ServiceResult
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
