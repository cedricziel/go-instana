/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// CustomEventSpecification struct for CustomEventSpecification
type CustomEventSpecification struct {
	Id             string         `json:"id"`
	Name           string         `json:"name"`
	EntityType     string         `json:"entityType"`
	Query          *string        `json:"query,omitempty"`
	Triggering     *bool          `json:"triggering,omitempty"`
	Description    *string        `json:"description,omitempty"`
	ExpirationTime *int64         `json:"expirationTime,omitempty"`
	Enabled        *bool          `json:"enabled,omitempty"`
	Rules          []AbstractRule `json:"rules"`
}

// NewCustomEventSpecification instantiates a new CustomEventSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomEventSpecification(id string, name string, entityType string, rules []AbstractRule) *CustomEventSpecification {
	this := CustomEventSpecification{}
	this.Id = id
	this.Name = name
	this.EntityType = entityType
	this.Rules = rules
	return &this
}

// NewCustomEventSpecificationWithDefaults instantiates a new CustomEventSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomEventSpecificationWithDefaults() *CustomEventSpecification {
	this := CustomEventSpecification{}
	return &this
}

// GetId returns the Id field value
func (o *CustomEventSpecification) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomEventSpecification) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CustomEventSpecification) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomEventSpecification) SetName(v string) {
	o.Name = v
}

// GetEntityType returns the EntityType field value
func (o *CustomEventSpecification) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *CustomEventSpecification) SetEntityType(v string) {
	o.EntityType = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *CustomEventSpecification) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *CustomEventSpecification) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *CustomEventSpecification) SetQuery(v string) {
	o.Query = &v
}

// GetTriggering returns the Triggering field value if set, zero value otherwise.
func (o *CustomEventSpecification) GetTriggering() bool {
	if o == nil || o.Triggering == nil {
		var ret bool
		return ret
	}
	return *o.Triggering
}

// GetTriggeringOk returns a tuple with the Triggering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetTriggeringOk() (*bool, bool) {
	if o == nil || o.Triggering == nil {
		return nil, false
	}
	return o.Triggering, true
}

// HasTriggering returns a boolean if a field has been set.
func (o *CustomEventSpecification) HasTriggering() bool {
	if o != nil && o.Triggering != nil {
		return true
	}

	return false
}

// SetTriggering gets a reference to the given bool and assigns it to the Triggering field.
func (o *CustomEventSpecification) SetTriggering(v bool) {
	o.Triggering = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomEventSpecification) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomEventSpecification) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomEventSpecification) SetDescription(v string) {
	o.Description = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *CustomEventSpecification) GetExpirationTime() int64 {
	if o == nil || o.ExpirationTime == nil {
		var ret int64
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetExpirationTimeOk() (*int64, bool) {
	if o == nil || o.ExpirationTime == nil {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *CustomEventSpecification) HasExpirationTime() bool {
	if o != nil && o.ExpirationTime != nil {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given int64 and assigns it to the ExpirationTime field.
func (o *CustomEventSpecification) SetExpirationTime(v int64) {
	o.ExpirationTime = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustomEventSpecification) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustomEventSpecification) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustomEventSpecification) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRules returns the Rules field value
func (o *CustomEventSpecification) GetRules() []AbstractRule {
	if o == nil {
		var ret []AbstractRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *CustomEventSpecification) GetRulesOk() (*[]AbstractRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rules, true
}

// SetRules sets field value
func (o *CustomEventSpecification) SetRules(v []AbstractRule) {
	o.Rules = v
}

func (o CustomEventSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["entityType"] = o.EntityType
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Triggering != nil {
		toSerialize["triggering"] = o.Triggering
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ExpirationTime != nil {
		toSerialize["expirationTime"] = o.ExpirationTime
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableCustomEventSpecification struct {
	value *CustomEventSpecification
	isSet bool
}

func (v NullableCustomEventSpecification) Get() *CustomEventSpecification {
	return v.value
}

func (v *NullableCustomEventSpecification) Set(val *CustomEventSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEventSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEventSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEventSpecification(val *CustomEventSpecification) *NullableCustomEventSpecification {
	return &NullableCustomEventSpecification{value: val, isSet: true}
}

func (v NullableCustomEventSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEventSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
