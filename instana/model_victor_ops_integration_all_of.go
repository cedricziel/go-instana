/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// VictorOpsIntegrationAllOf struct for VictorOpsIntegrationAllOf
type VictorOpsIntegrationAllOf struct {
	ApiKey     *string `json:"apiKey,omitempty"`
	RoutingKey *string `json:"routingKey,omitempty"`
}

// NewVictorOpsIntegrationAllOf instantiates a new VictorOpsIntegrationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVictorOpsIntegrationAllOf() *VictorOpsIntegrationAllOf {
	this := VictorOpsIntegrationAllOf{}
	return &this
}

// NewVictorOpsIntegrationAllOfWithDefaults instantiates a new VictorOpsIntegrationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVictorOpsIntegrationAllOfWithDefaults() *VictorOpsIntegrationAllOf {
	this := VictorOpsIntegrationAllOf{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *VictorOpsIntegrationAllOf) GetApiKey() string {
	if o == nil || o.ApiKey == nil {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VictorOpsIntegrationAllOf) GetApiKeyOk() (*string, bool) {
	if o == nil || o.ApiKey == nil {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *VictorOpsIntegrationAllOf) HasApiKey() bool {
	if o != nil && o.ApiKey != nil {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *VictorOpsIntegrationAllOf) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetRoutingKey returns the RoutingKey field value if set, zero value otherwise.
func (o *VictorOpsIntegrationAllOf) GetRoutingKey() string {
	if o == nil || o.RoutingKey == nil {
		var ret string
		return ret
	}
	return *o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VictorOpsIntegrationAllOf) GetRoutingKeyOk() (*string, bool) {
	if o == nil || o.RoutingKey == nil {
		return nil, false
	}
	return o.RoutingKey, true
}

// HasRoutingKey returns a boolean if a field has been set.
func (o *VictorOpsIntegrationAllOf) HasRoutingKey() bool {
	if o != nil && o.RoutingKey != nil {
		return true
	}

	return false
}

// SetRoutingKey gets a reference to the given string and assigns it to the RoutingKey field.
func (o *VictorOpsIntegrationAllOf) SetRoutingKey(v string) {
	o.RoutingKey = &v
}

func (o VictorOpsIntegrationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiKey != nil {
		toSerialize["apiKey"] = o.ApiKey
	}
	if o.RoutingKey != nil {
		toSerialize["routingKey"] = o.RoutingKey
	}
	return json.Marshal(toSerialize)
}

type NullableVictorOpsIntegrationAllOf struct {
	value *VictorOpsIntegrationAllOf
	isSet bool
}

func (v NullableVictorOpsIntegrationAllOf) Get() *VictorOpsIntegrationAllOf {
	return v.value
}

func (v *NullableVictorOpsIntegrationAllOf) Set(val *VictorOpsIntegrationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVictorOpsIntegrationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVictorOpsIntegrationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVictorOpsIntegrationAllOf(val *VictorOpsIntegrationAllOf) *NullableVictorOpsIntegrationAllOf {
	return &NullableVictorOpsIntegrationAllOf{value: val, isSet: true}
}

func (v NullableVictorOpsIntegrationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVictorOpsIntegrationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
