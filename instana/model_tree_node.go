/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// TreeNode struct for TreeNode
type TreeNode struct {
	SnapshotId *string     `json:"snapshotId,omitempty"`
	Type       *string     `json:"type,omitempty"`
	Children   *[]TreeNode `json:"children,omitempty"`
}

// NewTreeNode instantiates a new TreeNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeNode() *TreeNode {
	this := TreeNode{}
	return &this
}

// NewTreeNodeWithDefaults instantiates a new TreeNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeNodeWithDefaults() *TreeNode {
	this := TreeNode{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *TreeNode) GetSnapshotId() string {
	if o == nil || o.SnapshotId == nil {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNode) GetSnapshotIdOk() (*string, bool) {
	if o == nil || o.SnapshotId == nil {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *TreeNode) HasSnapshotId() bool {
	if o != nil && o.SnapshotId != nil {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *TreeNode) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TreeNode) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNode) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TreeNode) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TreeNode) SetType(v string) {
	o.Type = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *TreeNode) GetChildren() []TreeNode {
	if o == nil || o.Children == nil {
		var ret []TreeNode
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeNode) GetChildrenOk() (*[]TreeNode, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *TreeNode) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []TreeNode and assigns it to the Children field.
func (o *TreeNode) SetChildren(v []TreeNode) {
	o.Children = &v
}

func (o TreeNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SnapshotId != nil {
		toSerialize["snapshotId"] = o.SnapshotId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	return json.Marshal(toSerialize)
}

type NullableTreeNode struct {
	value *TreeNode
	isSet bool
}

func (v NullableTreeNode) Get() *TreeNode {
	return v.value
}

func (v *NullableTreeNode) Set(val *TreeNode) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeNode) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeNode(val *TreeNode) *NullableTreeNode {
	return &NullableTreeNode{value: val, isSet: true}
}

func (v NullableTreeNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
