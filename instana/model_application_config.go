/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// ApplicationConfig struct for ApplicationConfig
type ApplicationConfig struct {
	Id                 string             `json:"id"`
	Label              string             `json:"label"`
	MatchSpecification MatchExpressionDTO `json:"matchSpecification"`
	Scope              string             `json:"scope"`
	BoundaryScope      string             `json:"boundaryScope"`
}

// NewApplicationConfig instantiates a new ApplicationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationConfig(id string, label string, matchSpecification MatchExpressionDTO, scope string, boundaryScope string) *ApplicationConfig {
	this := ApplicationConfig{}
	this.Id = id
	this.Label = label
	this.MatchSpecification = matchSpecification
	this.Scope = scope
	this.BoundaryScope = boundaryScope
	return &this
}

// NewApplicationConfigWithDefaults instantiates a new ApplicationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationConfigWithDefaults() *ApplicationConfig {
	this := ApplicationConfig{}
	return &this
}

// GetId returns the Id field value
func (o *ApplicationConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApplicationConfig) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApplicationConfig) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ApplicationConfig) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ApplicationConfig) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ApplicationConfig) SetLabel(v string) {
	o.Label = v
}

// GetMatchSpecification returns the MatchSpecification field value
func (o *ApplicationConfig) GetMatchSpecification() MatchExpressionDTO {
	if o == nil {
		var ret MatchExpressionDTO
		return ret
	}

	return o.MatchSpecification
}

// GetMatchSpecificationOk returns a tuple with the MatchSpecification field value
// and a boolean to check if the value has been set.
func (o *ApplicationConfig) GetMatchSpecificationOk() (*MatchExpressionDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchSpecification, true
}

// SetMatchSpecification sets field value
func (o *ApplicationConfig) SetMatchSpecification(v MatchExpressionDTO) {
	o.MatchSpecification = v
}

// GetScope returns the Scope field value
func (o *ApplicationConfig) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *ApplicationConfig) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *ApplicationConfig) SetScope(v string) {
	o.Scope = v
}

// GetBoundaryScope returns the BoundaryScope field value
func (o *ApplicationConfig) GetBoundaryScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BoundaryScope
}

// GetBoundaryScopeOk returns a tuple with the BoundaryScope field value
// and a boolean to check if the value has been set.
func (o *ApplicationConfig) GetBoundaryScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BoundaryScope, true
}

// SetBoundaryScope sets field value
func (o *ApplicationConfig) SetBoundaryScope(v string) {
	o.BoundaryScope = v
}

func (o ApplicationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["matchSpecification"] = o.MatchSpecification
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	if true {
		toSerialize["boundaryScope"] = o.BoundaryScope
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationConfig struct {
	value *ApplicationConfig
	isSet bool
}

func (v NullableApplicationConfig) Get() *ApplicationConfig {
	return v.value
}

func (v *NullableApplicationConfig) Set(val *ApplicationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationConfig(val *ApplicationConfig) *NullableApplicationConfig {
	return &NullableApplicationConfig{value: val, isSet: true}
}

func (v NullableApplicationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
