/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// ConfigVersion struct for ConfigVersion
type ConfigVersion struct {
	Id      string `json:"id"`
	Created *int64 `json:"created,omitempty"`
	Enabled *bool  `json:"enabled,omitempty"`
}

// NewConfigVersion instantiates a new ConfigVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigVersion(id string) *ConfigVersion {
	this := ConfigVersion{}
	this.Id = id
	return &this
}

// NewConfigVersionWithDefaults instantiates a new ConfigVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigVersionWithDefaults() *ConfigVersion {
	this := ConfigVersion{}
	return &this
}

// GetId returns the Id field value
func (o *ConfigVersion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConfigVersion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConfigVersion) SetId(v string) {
	o.Id = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ConfigVersion) GetCreated() int64 {
	if o == nil || o.Created == nil {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigVersion) GetCreatedOk() (*int64, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ConfigVersion) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *ConfigVersion) SetCreated(v int64) {
	o.Created = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ConfigVersion) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigVersion) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ConfigVersion) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ConfigVersion) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ConfigVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableConfigVersion struct {
	value *ConfigVersion
	isSet bool
}

func (v NullableConfigVersion) Get() *ConfigVersion {
	return v.value
}

func (v *NullableConfigVersion) Set(val *ConfigVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigVersion(val *ConfigVersion) *NullableConfigVersion {
	return &NullableConfigVersion{value: val, isSet: true}
}

func (v NullableConfigVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
