/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// TagFilter struct for TagFilter
type TagFilter struct {
	Name     string  `json:"name"`
	Value    string  `json:"value"`
	Operator string  `json:"operator"`
	Entity   *string `json:"entity,omitempty"`
}

// NewTagFilter instantiates a new TagFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagFilter(name string, value string, operator string) *TagFilter {
	this := TagFilter{}
	this.Name = name
	this.Value = value
	this.Operator = operator
	return &this
}

// NewTagFilterWithDefaults instantiates a new TagFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagFilterWithDefaults() *TagFilter {
	this := TagFilter{}
	return &this
}

// GetName returns the Name field value
func (o *TagFilter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TagFilter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TagFilter) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *TagFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TagFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TagFilter) SetValue(v string) {
	o.Value = v
}

// GetOperator returns the Operator field value
func (o *TagFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *TagFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *TagFilter) SetOperator(v string) {
	o.Operator = v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *TagFilter) GetEntity() string {
	if o == nil || o.Entity == nil {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagFilter) GetEntityOk() (*string, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *TagFilter) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *TagFilter) SetEntity(v string) {
	o.Entity = &v
}

func (o TagFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableTagFilter struct {
	value *TagFilter
	isSet bool
}

func (v NullableTagFilter) Get() *TagFilter {
	return v.value
}

func (v *NullableTagFilter) Set(val *TagFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTagFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTagFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagFilter(val *TagFilter) *NullableTagFilter {
	return &NullableTagFilter{value: val, isSet: true}
}

func (v NullableTagFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
