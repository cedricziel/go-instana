/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// TagMatcherDTO struct for TagMatcherDTO
type TagMatcherDTO struct {
	MatchExpressionDTO
	Key      string  `json:"key"`
	Entity   string  `json:"entity"`
	Value    *string `json:"value,omitempty"`
	Operator string  `json:"operator"`
}

// NewTagMatcherDTO instantiates a new TagMatcherDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagMatcherDTO(key string, entity string, operator string) *TagMatcherDTO {
	this := TagMatcherDTO{}
	this.Key = key
	this.Entity = entity
	this.Operator = operator
	return &this
}

// NewTagMatcherDTOWithDefaults instantiates a new TagMatcherDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagMatcherDTOWithDefaults() *TagMatcherDTO {
	this := TagMatcherDTO{}
	return &this
}

// GetKey returns the Key field value
func (o *TagMatcherDTO) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TagMatcherDTO) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TagMatcherDTO) SetKey(v string) {
	o.Key = v
}

// GetEntity returns the Entity field value
func (o *TagMatcherDTO) GetEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *TagMatcherDTO) GetEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *TagMatcherDTO) SetEntity(v string) {
	o.Entity = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TagMatcherDTO) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagMatcherDTO) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TagMatcherDTO) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TagMatcherDTO) SetValue(v string) {
	o.Value = &v
}

// GetOperator returns the Operator field value
func (o *TagMatcherDTO) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *TagMatcherDTO) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *TagMatcherDTO) SetOperator(v string) {
	o.Operator = v
}

func (o TagMatcherDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMatchExpressionDTO, errMatchExpressionDTO := json.Marshal(o.MatchExpressionDTO)
	if errMatchExpressionDTO != nil {
		return []byte{}, errMatchExpressionDTO
	}
	errMatchExpressionDTO = json.Unmarshal([]byte(serializedMatchExpressionDTO), &toSerialize)
	if errMatchExpressionDTO != nil {
		return []byte{}, errMatchExpressionDTO
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["entity"] = o.Entity
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	return json.Marshal(toSerialize)
}

type NullableTagMatcherDTO struct {
	value *TagMatcherDTO
	isSet bool
}

func (v NullableTagMatcherDTO) Get() *TagMatcherDTO {
	return v.value
}

func (v *NullableTagMatcherDTO) Set(val *TagMatcherDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTagMatcherDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTagMatcherDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagMatcherDTO(val *TagMatcherDTO) *NullableTagMatcherDTO {
	return &NullableTagMatcherDTO{value: val, isSet: true}
}

func (v NullableTagMatcherDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagMatcherDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
