/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// SlackIntegration struct for SlackIntegration
type SlackIntegration struct {
	AbstractIntegration
	WebhookUrl string `json:"webhookUrl"`
	IconUrl    string `json:"iconUrl"`
	Channel    string `json:"channel"`
}

// NewSlackIntegration instantiates a new SlackIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlackIntegration(webhookUrl string, iconUrl string, channel string) *SlackIntegration {
	this := SlackIntegration{}
	this.WebhookUrl = webhookUrl
	this.IconUrl = iconUrl
	this.Channel = channel
	return &this
}

// NewSlackIntegrationWithDefaults instantiates a new SlackIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlackIntegrationWithDefaults() *SlackIntegration {
	this := SlackIntegration{}
	return &this
}

// GetWebhookUrl returns the WebhookUrl field value
func (o *SlackIntegration) GetWebhookUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value
// and a boolean to check if the value has been set.
func (o *SlackIntegration) GetWebhookUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebhookUrl, true
}

// SetWebhookUrl sets field value
func (o *SlackIntegration) SetWebhookUrl(v string) {
	o.WebhookUrl = v
}

// GetIconUrl returns the IconUrl field value
func (o *SlackIntegration) GetIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
func (o *SlackIntegration) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUrl, true
}

// SetIconUrl sets field value
func (o *SlackIntegration) SetIconUrl(v string) {
	o.IconUrl = v
}

// GetChannel returns the Channel field value
func (o *SlackIntegration) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *SlackIntegration) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *SlackIntegration) SetChannel(v string) {
	o.Channel = v
}

func (o SlackIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAbstractIntegration, errAbstractIntegration := json.Marshal(o.AbstractIntegration)
	if errAbstractIntegration != nil {
		return []byte{}, errAbstractIntegration
	}
	errAbstractIntegration = json.Unmarshal([]byte(serializedAbstractIntegration), &toSerialize)
	if errAbstractIntegration != nil {
		return []byte{}, errAbstractIntegration
	}
	if true {
		toSerialize["webhookUrl"] = o.WebhookUrl
	}
	if true {
		toSerialize["iconUrl"] = o.IconUrl
	}
	if true {
		toSerialize["channel"] = o.Channel
	}
	return json.Marshal(toSerialize)
}

type NullableSlackIntegration struct {
	value *SlackIntegration
	isSet bool
}

func (v NullableSlackIntegration) Get() *SlackIntegration {
	return v.value
}

func (v *NullableSlackIntegration) Set(val *SlackIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableSlackIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableSlackIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlackIntegration(val *SlackIntegration) *NullableSlackIntegration {
	return &NullableSlackIntegration{value: val, isSet: true}
}

func (v NullableSlackIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlackIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
