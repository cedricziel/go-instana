/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// SearchFieldResult struct for SearchFieldResult
type SearchFieldResult struct {
	Keyword     *string   `json:"keyword,omitempty"`
	Description *string   `json:"description,omitempty"`
	Context     *string   `json:"context,omitempty"`
	TermType    *string   `json:"termType,omitempty"`
	FixedValues *[]string `json:"fixedValues,omitempty"`
}

// NewSearchFieldResult instantiates a new SearchFieldResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchFieldResult() *SearchFieldResult {
	this := SearchFieldResult{}
	return &this
}

// NewSearchFieldResultWithDefaults instantiates a new SearchFieldResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchFieldResultWithDefaults() *SearchFieldResult {
	this := SearchFieldResult{}
	return &this
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *SearchFieldResult) GetKeyword() string {
	if o == nil || o.Keyword == nil {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFieldResult) GetKeywordOk() (*string, bool) {
	if o == nil || o.Keyword == nil {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *SearchFieldResult) HasKeyword() bool {
	if o != nil && o.Keyword != nil {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *SearchFieldResult) SetKeyword(v string) {
	o.Keyword = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SearchFieldResult) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFieldResult) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SearchFieldResult) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SearchFieldResult) SetDescription(v string) {
	o.Description = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *SearchFieldResult) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFieldResult) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *SearchFieldResult) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *SearchFieldResult) SetContext(v string) {
	o.Context = &v
}

// GetTermType returns the TermType field value if set, zero value otherwise.
func (o *SearchFieldResult) GetTermType() string {
	if o == nil || o.TermType == nil {
		var ret string
		return ret
	}
	return *o.TermType
}

// GetTermTypeOk returns a tuple with the TermType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFieldResult) GetTermTypeOk() (*string, bool) {
	if o == nil || o.TermType == nil {
		return nil, false
	}
	return o.TermType, true
}

// HasTermType returns a boolean if a field has been set.
func (o *SearchFieldResult) HasTermType() bool {
	if o != nil && o.TermType != nil {
		return true
	}

	return false
}

// SetTermType gets a reference to the given string and assigns it to the TermType field.
func (o *SearchFieldResult) SetTermType(v string) {
	o.TermType = &v
}

// GetFixedValues returns the FixedValues field value if set, zero value otherwise.
func (o *SearchFieldResult) GetFixedValues() []string {
	if o == nil || o.FixedValues == nil {
		var ret []string
		return ret
	}
	return *o.FixedValues
}

// GetFixedValuesOk returns a tuple with the FixedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFieldResult) GetFixedValuesOk() (*[]string, bool) {
	if o == nil || o.FixedValues == nil {
		return nil, false
	}
	return o.FixedValues, true
}

// HasFixedValues returns a boolean if a field has been set.
func (o *SearchFieldResult) HasFixedValues() bool {
	if o != nil && o.FixedValues != nil {
		return true
	}

	return false
}

// SetFixedValues gets a reference to the given []string and assigns it to the FixedValues field.
func (o *SearchFieldResult) SetFixedValues(v []string) {
	o.FixedValues = &v
}

func (o SearchFieldResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Keyword != nil {
		toSerialize["keyword"] = o.Keyword
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.TermType != nil {
		toSerialize["termType"] = o.TermType
	}
	if o.FixedValues != nil {
		toSerialize["fixedValues"] = o.FixedValues
	}
	return json.Marshal(toSerialize)
}

type NullableSearchFieldResult struct {
	value *SearchFieldResult
	isSet bool
}

func (v NullableSearchFieldResult) Get() *SearchFieldResult {
	return v.value
}

func (v *NullableSearchFieldResult) Set(val *SearchFieldResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFieldResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFieldResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFieldResult(val *SearchFieldResult) *NullableSearchFieldResult {
	return &NullableSearchFieldResult{value: val, isSet: true}
}

func (v NullableSearchFieldResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFieldResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
