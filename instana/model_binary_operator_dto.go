/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// BinaryOperatorDTO struct for BinaryOperatorDTO
type BinaryOperatorDTO struct {
	MatchExpressionDTO
	Left        MatchExpressionDTO `json:"left"`
	Right       MatchExpressionDTO `json:"right"`
	Conjunction string             `json:"conjunction"`
}

// NewBinaryOperatorDTO instantiates a new BinaryOperatorDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinaryOperatorDTO(left MatchExpressionDTO, right MatchExpressionDTO, conjunction string) *BinaryOperatorDTO {
	this := BinaryOperatorDTO{}
	this.Left = left
	this.Right = right
	this.Conjunction = conjunction
	return &this
}

// NewBinaryOperatorDTOWithDefaults instantiates a new BinaryOperatorDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinaryOperatorDTOWithDefaults() *BinaryOperatorDTO {
	this := BinaryOperatorDTO{}
	return &this
}

// GetLeft returns the Left field value
func (o *BinaryOperatorDTO) GetLeft() MatchExpressionDTO {
	if o == nil {
		var ret MatchExpressionDTO
		return ret
	}

	return o.Left
}

// GetLeftOk returns a tuple with the Left field value
// and a boolean to check if the value has been set.
func (o *BinaryOperatorDTO) GetLeftOk() (*MatchExpressionDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Left, true
}

// SetLeft sets field value
func (o *BinaryOperatorDTO) SetLeft(v MatchExpressionDTO) {
	o.Left = v
}

// GetRight returns the Right field value
func (o *BinaryOperatorDTO) GetRight() MatchExpressionDTO {
	if o == nil {
		var ret MatchExpressionDTO
		return ret
	}

	return o.Right
}

// GetRightOk returns a tuple with the Right field value
// and a boolean to check if the value has been set.
func (o *BinaryOperatorDTO) GetRightOk() (*MatchExpressionDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Right, true
}

// SetRight sets field value
func (o *BinaryOperatorDTO) SetRight(v MatchExpressionDTO) {
	o.Right = v
}

// GetConjunction returns the Conjunction field value
func (o *BinaryOperatorDTO) GetConjunction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Conjunction
}

// GetConjunctionOk returns a tuple with the Conjunction field value
// and a boolean to check if the value has been set.
func (o *BinaryOperatorDTO) GetConjunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conjunction, true
}

// SetConjunction sets field value
func (o *BinaryOperatorDTO) SetConjunction(v string) {
	o.Conjunction = v
}

func (o BinaryOperatorDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMatchExpressionDTO, errMatchExpressionDTO := json.Marshal(o.MatchExpressionDTO)
	if errMatchExpressionDTO != nil {
		return []byte{}, errMatchExpressionDTO
	}
	errMatchExpressionDTO = json.Unmarshal([]byte(serializedMatchExpressionDTO), &toSerialize)
	if errMatchExpressionDTO != nil {
		return []byte{}, errMatchExpressionDTO
	}
	if true {
		toSerialize["left"] = o.Left
	}
	if true {
		toSerialize["right"] = o.Right
	}
	if true {
		toSerialize["conjunction"] = o.Conjunction
	}
	return json.Marshal(toSerialize)
}

type NullableBinaryOperatorDTO struct {
	value *BinaryOperatorDTO
	isSet bool
}

func (v NullableBinaryOperatorDTO) Get() *BinaryOperatorDTO {
	return v.value
}

func (v *NullableBinaryOperatorDTO) Set(val *BinaryOperatorDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableBinaryOperatorDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableBinaryOperatorDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinaryOperatorDTO(val *BinaryOperatorDTO) *NullableBinaryOperatorDTO {
	return &NullableBinaryOperatorDTO{value: val, isSet: true}
}

func (v NullableBinaryOperatorDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinaryOperatorDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
