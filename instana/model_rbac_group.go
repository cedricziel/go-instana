/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// RbacGroup struct for RbacGroup
type RbacGroup struct {
	Id            *string        `json:"id,omitempty"`
	Name          string         `json:"name"`
	Members       []Member       `json:"members"`
	PermissionSet *PermissionSet `json:"permissionSet,omitempty"`
}

// NewRbacGroup instantiates a new RbacGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRbacGroup(name string, members []Member) *RbacGroup {
	this := RbacGroup{}
	this.Name = name
	this.Members = members
	return &this
}

// NewRbacGroupWithDefaults instantiates a new RbacGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRbacGroupWithDefaults() *RbacGroup {
	this := RbacGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RbacGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RbacGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RbacGroup) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *RbacGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RbacGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RbacGroup) SetName(v string) {
	o.Name = v
}

// GetMembers returns the Members field value
func (o *RbacGroup) GetMembers() []Member {
	if o == nil {
		var ret []Member
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *RbacGroup) GetMembersOk() (*[]Member, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Members, true
}

// SetMembers sets field value
func (o *RbacGroup) SetMembers(v []Member) {
	o.Members = v
}

// GetPermissionSet returns the PermissionSet field value if set, zero value otherwise.
func (o *RbacGroup) GetPermissionSet() PermissionSet {
	if o == nil || o.PermissionSet == nil {
		var ret PermissionSet
		return ret
	}
	return *o.PermissionSet
}

// GetPermissionSetOk returns a tuple with the PermissionSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacGroup) GetPermissionSetOk() (*PermissionSet, bool) {
	if o == nil || o.PermissionSet == nil {
		return nil, false
	}
	return o.PermissionSet, true
}

// HasPermissionSet returns a boolean if a field has been set.
func (o *RbacGroup) HasPermissionSet() bool {
	if o != nil && o.PermissionSet != nil {
		return true
	}

	return false
}

// SetPermissionSet gets a reference to the given PermissionSet and assigns it to the PermissionSet field.
func (o *RbacGroup) SetPermissionSet(v PermissionSet) {
	o.PermissionSet = &v
}

func (o RbacGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["members"] = o.Members
	}
	if o.PermissionSet != nil {
		toSerialize["permissionSet"] = o.PermissionSet
	}
	return json.Marshal(toSerialize)
}

type NullableRbacGroup struct {
	value *RbacGroup
	isSet bool
}

func (v NullableRbacGroup) Get() *RbacGroup {
	return v.value
}

func (v *NullableRbacGroup) Set(val *RbacGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRbacGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRbacGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbacGroup(val *RbacGroup) *NullableRbacGroup {
	return &NullableRbacGroup{value: val, isSet: true}
}

func (v NullableRbacGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbacGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
