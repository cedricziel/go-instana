/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// Trace struct for Trace
type Trace struct {
	Id        string    `json:"id"`
	Label     string    `json:"label"`
	StartTime *int64    `json:"startTime,omitempty"`
	Duration  *int64    `json:"duration,omitempty"`
	Erroneous *bool     `json:"erroneous,omitempty"`
	Service   *Service  `json:"service,omitempty"`
	Endpoint  *Endpoint `json:"endpoint,omitempty"`
}

// NewTrace instantiates a new Trace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrace(id string, label string) *Trace {
	this := Trace{}
	this.Id = id
	this.Label = label
	return &this
}

// NewTraceWithDefaults instantiates a new Trace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceWithDefaults() *Trace {
	this := Trace{}
	return &this
}

// GetId returns the Id field value
func (o *Trace) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Trace) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Trace) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *Trace) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Trace) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Trace) SetLabel(v string) {
	o.Label = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Trace) GetStartTime() int64 {
	if o == nil || o.StartTime == nil {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetStartTimeOk() (*int64, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Trace) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *Trace) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Trace) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Trace) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *Trace) SetDuration(v int64) {
	o.Duration = &v
}

// GetErroneous returns the Erroneous field value if set, zero value otherwise.
func (o *Trace) GetErroneous() bool {
	if o == nil || o.Erroneous == nil {
		var ret bool
		return ret
	}
	return *o.Erroneous
}

// GetErroneousOk returns a tuple with the Erroneous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetErroneousOk() (*bool, bool) {
	if o == nil || o.Erroneous == nil {
		return nil, false
	}
	return o.Erroneous, true
}

// HasErroneous returns a boolean if a field has been set.
func (o *Trace) HasErroneous() bool {
	if o != nil && o.Erroneous != nil {
		return true
	}

	return false
}

// SetErroneous gets a reference to the given bool and assigns it to the Erroneous field.
func (o *Trace) SetErroneous(v bool) {
	o.Erroneous = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *Trace) GetService() Service {
	if o == nil || o.Service == nil {
		var ret Service
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetServiceOk() (*Service, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *Trace) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given Service and assigns it to the Service field.
func (o *Trace) SetService(v Service) {
	o.Service = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *Trace) GetEndpoint() Endpoint {
	if o == nil || o.Endpoint == nil {
		var ret Endpoint
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetEndpointOk() (*Endpoint, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *Trace) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given Endpoint and assigns it to the Endpoint field.
func (o *Trace) SetEndpoint(v Endpoint) {
	o.Endpoint = &v
}

func (o Trace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.Erroneous != nil {
		toSerialize["erroneous"] = o.Erroneous
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	return json.Marshal(toSerialize)
}

type NullableTrace struct {
	value *Trace
	isSet bool
}

func (v NullableTrace) Get() *Trace {
	return v.value
}

func (v *NullableTrace) Set(val *Trace) {
	v.value = val
	v.isSet = true
}

func (v NullableTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrace(val *Trace) *NullableTrace {
	return &NullableTrace{value: val, isSet: true}
}

func (v NullableTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
