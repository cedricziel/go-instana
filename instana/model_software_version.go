/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// SoftwareVersion struct for SoftwareVersion
type SoftwareVersion struct {
	Name    string         `json:"name"`
	Version string         `json:"version"`
	Origin  string         `json:"origin"`
	Type    string         `json:"type"`
	UsedBy  []SoftwareUser `json:"usedBy"`
}

// NewSoftwareVersion instantiates a new SoftwareVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareVersion(name string, version string, origin string, type_ string, usedBy []SoftwareUser) *SoftwareVersion {
	this := SoftwareVersion{}
	this.Name = name
	this.Version = version
	this.Origin = origin
	this.Type = type_
	this.UsedBy = usedBy
	return &this
}

// NewSoftwareVersionWithDefaults instantiates a new SoftwareVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareVersionWithDefaults() *SoftwareVersion {
	this := SoftwareVersion{}
	return &this
}

// GetName returns the Name field value
func (o *SoftwareVersion) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SoftwareVersion) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SoftwareVersion) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *SoftwareVersion) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SoftwareVersion) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SoftwareVersion) SetVersion(v string) {
	o.Version = v
}

// GetOrigin returns the Origin field value
func (o *SoftwareVersion) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *SoftwareVersion) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *SoftwareVersion) SetOrigin(v string) {
	o.Origin = v
}

// GetType returns the Type field value
func (o *SoftwareVersion) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SoftwareVersion) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SoftwareVersion) SetType(v string) {
	o.Type = v
}

// GetUsedBy returns the UsedBy field value
func (o *SoftwareVersion) GetUsedBy() []SoftwareUser {
	if o == nil {
		var ret []SoftwareUser
		return ret
	}

	return o.UsedBy
}

// GetUsedByOk returns a tuple with the UsedBy field value
// and a boolean to check if the value has been set.
func (o *SoftwareVersion) GetUsedByOk() (*[]SoftwareUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedBy, true
}

// SetUsedBy sets field value
func (o *SoftwareVersion) SetUsedBy(v []SoftwareUser) {
	o.UsedBy = v
}

func (o SoftwareVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["origin"] = o.Origin
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["usedBy"] = o.UsedBy
	}
	return json.Marshal(toSerialize)
}

type NullableSoftwareVersion struct {
	value *SoftwareVersion
	isSet bool
}

func (v NullableSoftwareVersion) Get() *SoftwareVersion {
	return v.value
}

func (v *NullableSoftwareVersion) Set(val *SoftwareVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareVersion(val *SoftwareVersion) *NullableSoftwareVersion {
	return &NullableSoftwareVersion{value: val, isSet: true}
}

func (v NullableSoftwareVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
