/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// HealthState struct for HealthState
type HealthState struct {
	Health   *string   `json:"health,omitempty"`
	Messages *[]string `json:"messages,omitempty"`
}

// NewHealthState instantiates a new HealthState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthState() *HealthState {
	this := HealthState{}
	return &this
}

// NewHealthStateWithDefaults instantiates a new HealthState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthStateWithDefaults() *HealthState {
	this := HealthState{}
	return &this
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *HealthState) GetHealth() string {
	if o == nil || o.Health == nil {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthState) GetHealthOk() (*string, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *HealthState) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *HealthState) SetHealth(v string) {
	o.Health = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *HealthState) GetMessages() []string {
	if o == nil || o.Messages == nil {
		var ret []string
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthState) GetMessagesOk() (*[]string, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *HealthState) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *HealthState) SetMessages(v []string) {
	o.Messages = &v
}

func (o HealthState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	return json.Marshal(toSerialize)
}

type NullableHealthState struct {
	value *HealthState
	isSet bool
}

func (v NullableHealthState) Get() *HealthState {
	return v.value
}

func (v *NullableHealthState) Set(val *HealthState) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthState) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthState(val *HealthState) *NullableHealthState {
	return &NullableHealthState{value: val, isSet: true}
}

func (v NullableHealthState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
