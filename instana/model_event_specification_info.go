/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// EventSpecificationInfo struct for EventSpecificationInfo
type EventSpecificationInfo struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	EntityType  string  `json:"entityType"`
	Type        string  `json:"type"`
	Severity    *int32  `json:"severity,omitempty"`
	Triggering  *bool   `json:"triggering,omitempty"`
	Invalid     *bool   `json:"invalid,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
}

// NewEventSpecificationInfo instantiates a new EventSpecificationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSpecificationInfo(id string, name string, entityType string, type_ string) *EventSpecificationInfo {
	this := EventSpecificationInfo{}
	this.Id = id
	this.Name = name
	this.EntityType = entityType
	this.Type = type_
	return &this
}

// NewEventSpecificationInfoWithDefaults instantiates a new EventSpecificationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSpecificationInfoWithDefaults() *EventSpecificationInfo {
	this := EventSpecificationInfo{}
	return &this
}

// GetId returns the Id field value
func (o *EventSpecificationInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventSpecificationInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *EventSpecificationInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventSpecificationInfo) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventSpecificationInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventSpecificationInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventSpecificationInfo) SetDescription(v string) {
	o.Description = &v
}

// GetEntityType returns the EntityType field value
func (o *EventSpecificationInfo) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *EventSpecificationInfo) SetEntityType(v string) {
	o.EntityType = v
}

// GetType returns the Type field value
func (o *EventSpecificationInfo) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventSpecificationInfo) SetType(v string) {
	o.Type = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *EventSpecificationInfo) GetSeverity() int32 {
	if o == nil || o.Severity == nil {
		var ret int32
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetSeverityOk() (*int32, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *EventSpecificationInfo) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given int32 and assigns it to the Severity field.
func (o *EventSpecificationInfo) SetSeverity(v int32) {
	o.Severity = &v
}

// GetTriggering returns the Triggering field value if set, zero value otherwise.
func (o *EventSpecificationInfo) GetTriggering() bool {
	if o == nil || o.Triggering == nil {
		var ret bool
		return ret
	}
	return *o.Triggering
}

// GetTriggeringOk returns a tuple with the Triggering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetTriggeringOk() (*bool, bool) {
	if o == nil || o.Triggering == nil {
		return nil, false
	}
	return o.Triggering, true
}

// HasTriggering returns a boolean if a field has been set.
func (o *EventSpecificationInfo) HasTriggering() bool {
	if o != nil && o.Triggering != nil {
		return true
	}

	return false
}

// SetTriggering gets a reference to the given bool and assigns it to the Triggering field.
func (o *EventSpecificationInfo) SetTriggering(v bool) {
	o.Triggering = &v
}

// GetInvalid returns the Invalid field value if set, zero value otherwise.
func (o *EventSpecificationInfo) GetInvalid() bool {
	if o == nil || o.Invalid == nil {
		var ret bool
		return ret
	}
	return *o.Invalid
}

// GetInvalidOk returns a tuple with the Invalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetInvalidOk() (*bool, bool) {
	if o == nil || o.Invalid == nil {
		return nil, false
	}
	return o.Invalid, true
}

// HasInvalid returns a boolean if a field has been set.
func (o *EventSpecificationInfo) HasInvalid() bool {
	if o != nil && o.Invalid != nil {
		return true
	}

	return false
}

// SetInvalid gets a reference to the given bool and assigns it to the Invalid field.
func (o *EventSpecificationInfo) SetInvalid(v bool) {
	o.Invalid = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EventSpecificationInfo) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpecificationInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EventSpecificationInfo) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EventSpecificationInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o EventSpecificationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["entityType"] = o.EntityType
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.Triggering != nil {
		toSerialize["triggering"] = o.Triggering
	}
	if o.Invalid != nil {
		toSerialize["invalid"] = o.Invalid
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableEventSpecificationInfo struct {
	value *EventSpecificationInfo
	isSet bool
}

func (v NullableEventSpecificationInfo) Get() *EventSpecificationInfo {
	return v.value
}

func (v *NullableEventSpecificationInfo) Set(val *EventSpecificationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSpecificationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSpecificationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSpecificationInfo(val *EventSpecificationInfo) *NullableEventSpecificationInfo {
	return &NullableEventSpecificationInfo{value: val, isSet: true}
}

func (v NullableEventSpecificationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSpecificationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
