/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// ServiceScopedToWithMetadata struct for ServiceScopedToWithMetadata
type ServiceScopedToWithMetadata struct {
	Applications []ApplicationScopeWithMetadata `json:"applications"`
}

// NewServiceScopedToWithMetadata instantiates a new ServiceScopedToWithMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceScopedToWithMetadata(applications []ApplicationScopeWithMetadata) *ServiceScopedToWithMetadata {
	this := ServiceScopedToWithMetadata{}
	this.Applications = applications
	return &this
}

// NewServiceScopedToWithMetadataWithDefaults instantiates a new ServiceScopedToWithMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceScopedToWithMetadataWithDefaults() *ServiceScopedToWithMetadata {
	this := ServiceScopedToWithMetadata{}
	return &this
}

// GetApplications returns the Applications field value
func (o *ServiceScopedToWithMetadata) GetApplications() []ApplicationScopeWithMetadata {
	if o == nil {
		var ret []ApplicationScopeWithMetadata
		return ret
	}

	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value
// and a boolean to check if the value has been set.
func (o *ServiceScopedToWithMetadata) GetApplicationsOk() (*[]ApplicationScopeWithMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Applications, true
}

// SetApplications sets field value
func (o *ServiceScopedToWithMetadata) SetApplications(v []ApplicationScopeWithMetadata) {
	o.Applications = v
}

func (o ServiceScopedToWithMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["applications"] = o.Applications
	}
	return json.Marshal(toSerialize)
}

type NullableServiceScopedToWithMetadata struct {
	value *ServiceScopedToWithMetadata
	isSet bool
}

func (v NullableServiceScopedToWithMetadata) Get() *ServiceScopedToWithMetadata {
	return v.value
}

func (v *NullableServiceScopedToWithMetadata) Set(val *ServiceScopedToWithMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceScopedToWithMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceScopedToWithMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceScopedToWithMetadata(val *ServiceScopedToWithMetadata) *NullableServiceScopedToWithMetadata {
	return &NullableServiceScopedToWithMetadata{value: val, isSet: true}
}

func (v NullableServiceScopedToWithMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceScopedToWithMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
