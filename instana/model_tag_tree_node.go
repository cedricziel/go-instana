/*
 * Introduction to Instana public APIs
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.192.86
 * Contact: support@instana.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instana

import (
	"encoding/json"
)

// TagTreeNode struct for TagTreeNode
type TagTreeNode struct {
	Type  *string `json:"type,omitempty"`
	Icon  *string `json:"icon,omitempty"`
	Label *string `json:"label,omitempty"`
}

// NewTagTreeNode instantiates a new TagTreeNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagTreeNode() *TagTreeNode {
	this := TagTreeNode{}
	return &this
}

// NewTagTreeNodeWithDefaults instantiates a new TagTreeNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagTreeNodeWithDefaults() *TagTreeNode {
	this := TagTreeNode{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TagTreeNode) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagTreeNode) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TagTreeNode) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TagTreeNode) SetType(v string) {
	o.Type = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *TagTreeNode) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagTreeNode) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *TagTreeNode) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *TagTreeNode) SetIcon(v string) {
	o.Icon = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *TagTreeNode) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagTreeNode) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *TagTreeNode) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *TagTreeNode) SetLabel(v string) {
	o.Label = &v
}

func (o TagTreeNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	return json.Marshal(toSerialize)
}

type NullableTagTreeNode struct {
	value *TagTreeNode
	isSet bool
}

func (v NullableTagTreeNode) Get() *TagTreeNode {
	return v.value
}

func (v *NullableTagTreeNode) Set(val *TagTreeNode) {
	v.value = val
	v.isSet = true
}

func (v NullableTagTreeNode) IsSet() bool {
	return v.isSet
}

func (v *NullableTagTreeNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagTreeNode(val *TagTreeNode) *NullableTagTreeNode {
	return &NullableTagTreeNode{value: val, isSet: true}
}

func (v NullableTagTreeNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagTreeNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
